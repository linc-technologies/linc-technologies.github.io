---
openapi: 3.0.3
info:
  title: Hero for Developers
  version: 0.5.0
  x-logo:
    url: "./hero-logo.png"
    backgroundColor: "#FAFAFA"
    altText: "Hero, by LINC-ED"
  description: |
    ### Welcome to the Hero Developer portal.

    The following documentation describes the resources that make up the
    official Hero REST API.
    If you have any problems or requests, please contact LINC-ED Support.

servers:
  - url: https://staging-api.linc-ed.com
    description: User Acceptance and Integration Testing Environment
  - url: https://api4.linc-ed.com
    description: Production Environment

tags:
  - name: Attendance
    description: |
      audits, records, registers, analyses, nz moe learner summaries and nz
      moe day calculations.
  - name: Dates
    description: |
      School Dates and Terms.
  - name: Enrolments
    description: |
      Applications to Enrol.
  - name: Groups
    description: |
      Groups.
  - name: People
    description: |
      Staff, Caregivers, Students, Student Enrolments and Caregiver Access
      Requests.
  - name: Schools
    description: |
      Schools and School Options.
  - name: Timetable
    description: |
      School Timetable Weekly Structures and Class Periods.

paths:
  "/attendance/v4/analyses":
    get:
      operationId: ListAttendanceAnalyses
      summary: List Attendance Analyses
      description: |-
        Lists all Attendance Analysis records for the specified students.
      security:
        - staging:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
        - production:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
      tags:
        - Attendance
      parameters:
        - name: schoolId
          description: schoolId enables filtering analyses by school.
          in: query
          required: false
          schema:
            format: uuid
            type: string
        - name: campusId
          description: campusId enables filtering analyses by school campus.
          in: query
          required: false
          schema:
            format: uuid
            type: string
        - name: groupId
          description: groupId enables filtering analyses by group membership.
          in: query
          required: false
          schema:
            format: uuid
            type: string
        - name: dateFrom
          description: |-
            dateFrom allows an analysis to be performed within a specified date
            range, in conjunction with dateTo.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          description: |-
            dateTo allows an analysis to be performed within a specified date range,
            in conjunction with dateFrom.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: personIds
          description: personIds is used internally to perform a groupId filter.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceListAttendanceAnalysesResponse"

  "/attendance/v4/audits":
    get:
      operationId: AttendanceListAudits
      summary: List Attendance Audits
      description: |
        Lists attendance audit records, and enables filtering for specific
        attendance audit records.
      security:
        - staging:
          - urn:hero:attendance:audits:read
        - production:
          - urn:hero:attendance:audits:read
      tags:
        - Attendance
      parameters:
        - name: schoolId
          description: |
            schoolId enables filtering attendance audit records by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: recordId
          description: |
            recordId enables filtering attendance audit records by attendance
            record.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateFrom
          description: |-
            dateFrom enables filtering attendance audit records from a
            specified date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          description: |
            dateTo enables filtering attendance audit records to a specified
            date.
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceListAuditsResponse"

  "/attendance/v4/learnersummary/nzmoe":
    get:
      operationId: GetLearnerSummaryNzMoe
      summary: Get Learner Summary NZ MOE
      description: |
        Returns an attendance summary for a Student within the NZ MOE
        Jurisdiction.
      security:
        - staging:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
        - production:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
      tags:
        - Attendance
      parameters:
        - name: schoolId
          description: schoolId enables filtering attendance summaries by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: campusId enables filtering attendance summaries by school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personId
          description: personId enables filtering attendance summaries by student.
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceLearnerSummaryNzMoeResponse"

  "/attendance/v4/nzmoedays":
    get:
      operationId: ListNzMoeDays
      summary: List NZ MOE Days
      description: |
        Returns a list of "NZ MoE Day" records, and enables filtering for
        specific records.
      security:
        - staging:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
        - production:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
      tags:
        - Attendance
      parameters:
        - name: schoolId
          description: schoolId enables filtering NzMoeDay records by a school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateId
          description: dateId enables filtering NzMoeDay records by a date.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: campusId enables filtering NzMoeDay records by a school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personId
          description: personId enables filtering NzMoeDay records by a person.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateFrom
          description: |-
            dateFrom enables filtering NzMoeDay records from a specified date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          description: dateTo enables filtering NzMoeDay records to a specified date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: groupId
          description: |-
            groupId enables filtering NzMoeDay records for students who are
            current members of the given group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personIds
          description: personIds enables filtering for a list of students.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceListNzMoeDaysResponse"

  "/attendance/v4/records":
    get:
      operationId: ListRecords
      summary: List Attendance Records
      description: |
        Returns a list of attendance records, and enables filtering for
        specific attendance records.
      security:
        - staging:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
        - production:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
      tags:
        - Attendance
      parameters:
        - name: schoolId
          description: |
            schoolId enables filtering attendance records by a school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateId
          description: dateId enables filtering attendance records by a date.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: |
            campusId enables filtering attendance records by a school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personId
          description: |
            personId enables filtering attendance records by a person.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: periodId
          description: |
            periodId enables filtering attendance records by a period.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateFrom
          description: |
            dateFrom enables filtering attendance records from a specified
            date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          description: |
            dateTo enables filtering attendance records to a specified date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: groupId
          description: |-
            groupId enables filtering attendance records for students who are
            current members of the given group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personIds
          description: |-
            personIds enables filtering for a list of students.
            Note: Used internally by groupId filter. Therefore only supply
            either a group ID, or personIDs.
            Any presented personIds will be overwritten by group member
            personIds.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: absencesOnly
          description: |-
            absencesOnly enables filtering for only absences.
            note: Used primarily for absence reporting.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceListRecordsResponse"

    post:
      operationId: CreateRecord
      summary: Create Record
      description: Creates a new attendance record for a student.
      security:
        - staging:
          - urn:hero:attendance:records
        - production:
          - urn:hero:attendance:records
      tags:
        - Attendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceCreateRecordRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceRecordResponse"

  "/attendance/v4/records/:bulk":
    post:
      operationId: BulkCreateRecords
      summary: Bulk Create Records
      description: |
        Combines what would be multiple calls of the same operation to create
        many attendance records. It optimises this process by enabling a client
        to be able to send a single bulk create records request instead,
        containing an array of attendance records to create.
      security:
        - staging:
          - urn:hero:attendance:records
        - production:
          - urn:hero:attendance:records
      tags:
        - Attendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceBulkCreateRecordsRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/attendance/v4/records/:bulkupdate":
    post:
      operationId: BulkUpdateRecords
      summary: Bulk Update Records
      description: |
        Combines what would be multiple calls of the same operation to update
        many attendance records. It optimises this process by enabling a client
        to be able to send a single bulk update records request instead,
        containing an array of attendance records to update.
      security:
        - staging:
          - urn:hero:attendance:records
        - production:
          - urn:hero:attendance:records
      tags:
        - Attendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceBulkUpdateRecordsRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceListRecordsResponse"

  "/attendance/v4/records/{recordId}":
    get:
      operationId: GetRecord
      summary: Get Record
      description: Returns the specified attendance record.
      security:
        - staging:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
        - production:
          - urn:hero:attendance:records
          - urn:hero:attendance:records:read
      tags:
        - Attendance
      parameters:
        - name: recordId
          description: |
            recordId is the unique attendance record resource to get from
            the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceRecordResponse"

    put:
      operationId: UpdateRecord
      summary: Update Record
      description: |
        Updates the specified attendance record with the provided resource.
      security:
        - staging:
          - urn:hero:attendance:records
        - production:
          - urn:hero:attendance:records
      tags:
        - Attendance
      parameters:
        - name: recordId
          description: |-
            recordId is the unique identifier of the attendance record resource
            to update on the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceUpdateRecordRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceRecordResponse"

    delete:
      operationId: DeleteRecord
      summary: Delete Record
      description: Removes the specified attendance record.
      security:
        - staging:
          - urn:hero:attendance:records:delete
        - production:
          - urn:hero:attendance:records:delete
      tags:
        - Attendance
      parameters:
        - name: recordId
          description: |-
            recordId is the unique attendance record resource to delete from
            the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/attendance/v4/registers":
    get:
      operationId: ListRegisters
      summary: List Registers
      description: |
        Returns a list of attendance registers, and enables filtering for
        specific registers.
      security:
        - staging:
          - urn:hero:attendance:registers
          - urn:hero:attendance:registers:read
        - production:
          - urn:hero:attendance:registers
          - urn:hero:attendance:registers:read
      tags:
        - Attendance
      parameters:
        - name: schoolId
          description: |
            schoolId enables filtering group attendance register records by
            school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateId
          description: |
            dateId enables filtering group attendance register records by date.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: |-
            campusId enables filtering group attendance register records by a
            school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: groupId
          description: |
            groupId enables filtering group attendance register records by a
            group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateFrom
          description: |-
            dateFrom enables filtering group attendance register records from a
            specified date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          description: |-
            dateTo enables filtering group attendance register records to a
            specified date.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: periodId
          description: |
            periodId enables filtering group attendance register records by a
            period.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: include
          description: |-
            Include enables returning related records by providing a comma
            separated string containing the plural form of the resource names.
            For example, 'records'.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceListRegistersResponse"

    post:
      operationId: CreateRegister
      summary: Create Register
      description: Creates a new attendance register for a group of students.
      security:
        - staging:
          - urn:hero:attendance:registers
        - production:
          - urn:hero:attendance:registers
      tags:
        - Attendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceCreateRegisterRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceRegisterResponse"

  "/attendance/v4/registers/:bulk":
    post:
      operationId: BulkCreateRegisters
      summary: Bulk Create Registers
      description: |
        Combines what would be multiple calls of the same operation to create
        many attendance registers. It optimises this process by enabling a
        client to be able to send a single bulk create registers request
        instead, containing an array of attendance registers to create.
      security:
        - staging:
          - urn:hero:attendance:registers
        - production:
          - urn:hero:attendance:registers
      tags:
        - Attendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceBulkCreateRegistersRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/attendance/v4/registers/{registerId}":
    get:
      operationId: GetRegister
      summary: Get Register
      description: Returns the specified attendance register.
      security:
        - staging:
          - urn:hero:attendance:registers
          - urn:hero:attendance:registers:read
        - production:
          - urn:hero:attendance:registers
          - urn:hero:attendance:registers:read
      tags:
        - Attendance
      parameters:
        - name: registerId
          description: |-
            registerId is the unique attendance register resource to get from
            the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceRegisterResponse"

    put:
      operationId: UpdateRegister
      summary: Update Register
      description: |
        Updates the specified attendance register with the provided resource.
      security:
        - staging:
          - urn:hero:attendance:registers
        - production:
          - urn:hero:attendance:registers
      tags:
        - Attendance
      parameters:
        - name: registerId
          description: |-
            registerId is the unique identifier of the attendance register
            resource to update on the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attendanceUpdateRegisterRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/attendanceRegisterResponse"

    delete:
      operationId: DeleteRegister
      summary: Delete Register
      description: Removes the specified attendance register.
      security:
        - staging:
          - urn:hero:attendance:registers:delete
        - production:
          - urn:hero:attendance:registers:delete
      tags:
        - Attendance
      parameters:
        - name: registerId
          description: |-
            registerId is the unique attendance register resource to delete
            from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/dates/v4/dates":
    get:
      operationId: ListDates
      summary: List Dates
      description: Lists school dates, and enables filtering resources.
      security:
        - staging:
          - urn:hero:dates:dates
          - urn:hero:dates:dates:read
        - production:
          - urn:hero:dates:dates
          - urn:hero:dates:dates:read
      tags:
        - Dates
      parameters:
        - name: schoolId
          description: schoolId enables filtering dates by a school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: year
          description: year enables filtering dates by a year.
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: date
          description: |
            date enables filtering for a specific date record in in ISO 8601
            format (YYYY-MM-DD).
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/datesListDatesResponse"

    post:
      operationId: CreateDate
      summary: Create Date
      description: Creates a date resource.
      security:
        - staging:
          - urn:hero:dates:dates
        - production:
          - urn:hero:dates:dates
      tags:
        - Dates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/datesCreateDateRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/datesDateResponse"

  "/dates/v4/dates/{dateId}":
    get:
      operationId: GetDate
      summary: Get Date
      description: Gets the specified date resource.
      security:
        - staging:
          - urn:hero:dates:dates
          - urn:hero:dates:dates:read
        - production:
          - urn:hero:dates:dates
          - urn:hero:dates:dates:read
      tags:
        - Dates
      parameters:
        - name: dateId
          description: |-
            dateId is the unique date resource to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/datesDateResponse"

    put:
      operationId: UpdateDate
      summary: Update Date
      description: Updates the specified date resource.
      security:
        - staging:
          - urn:hero:dates:dates
        - production:
          - urn:hero:dates:dates
      tags:
        - Dates
      parameters:
        - name: dateId
          description: |-
            dateId is the unique identifier of the date resource to update on
            the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/datesUpdateDateRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/datesDateResponse"

    delete:
      operationId: DeleteDate
      summary: Delete Date
      description: Deletes the specified date resource.
      security:
        - staging:
          - urn:hero:dates:dates:delete
        - production:
          - urn:hero:dates:dates:delete
      tags:
        - Dates
      parameters:
        - name: dateId
          description: |-
            dateId is the unique date resource to delete from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/dates/v4/dates/:bulk":
    post:
      operationId: BulkCreateDates
      summary: Bulk Create Dates
      description: |-
        Combines what would be multiple calls of the same operation to create
        many date resources. It optimises this process by enabling a client to
        send a single bulk create dates request instead, which contains an
        array of dates to create.
      security:
        - staging:
          - urn:hero:dates:dates
        - production:
          - urn:hero:dates:dates
      tags:
        - Dates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/datesBulkCreateDatesRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/dates/v4/terms":
    get:
      operationId: ListTerms
      summary: List Terms
      description: |-
        Lists school terms with start/end dates for a school and enables
        filtering resources.
      security:
        - staging:
          - urn:hero:dates:dates
          - urn:hero:dates:dates:read
        - production:
          - urn:hero:dates:dates
          - urn:hero:dates:dates:read
      tags:
        - Dates
      parameters:
        - name: schoolId
          description: schoolId enables filtering terms by a school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/datesListTermsResponse"

  "/enrolments/v4/applications":
    get:
      operationId: ListApplications
      summary: List Applications
      description: Lists all applications to enrol and enables filtering resources.
      security:
        - staging:
          - urn:hero:enrolments:applications
          - urn:hero:enrolments:applications:read
        - production:
          - urn:hero:enrolments:applications
          - urn:hero:enrolments:applications:read
      tags:
        - Enrolments
      parameters:
        - name: schoolId
          description: |-
            schoolId filters enrolment applications based on the school.
            For example, "61f78993-90a9-4392-92dd-83a4368528b8".
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: |-
            campusId enables filtering enrolment applications based on school
            Campus'.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: countryCode
          description: |-
            countryCode filters enrolment requests to a specified country.
            The code must be ISO Alpha 2, for example NZ.
          in: query
          required: false
          schema:
            type: string
            maxLength: 2
        - name: schoolCode
          description: |-
            schoolCode is a school identifier as given by a state based
            educational body.
            For example, the Ministry of Education's School Codes - 335.
          in: query
          required: false
          schema:
            type: string
        - name: campusCode
          description: |
            campusCode is the short code assigned for the campus.
            For example, 'PRI'.
          in: query
          required: false
          schema:
            type: string
        - name: enrolmentYear
          description: |-
            enrolmentYear is the year in which the application was handed in
            for.
            For example, 2018.
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: authorId
          description: |-
            authorId enables filtering enrolment applications based on the
            author.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personId
          description: |-
            personId enables filtering enrolment applications based on person.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/enrolmentsApplicationStatus"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsListApplicationsResponse"

    post:
      operationId: CreateApplication
      summary: Create Application
      description: |
        Creates an Enrolment Application Resource.
        This route is public.
      tags:
        - Enrolments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/enrolmentsCreateApplicationRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsApplicationResponse"

  "/enrolments/v4/applications/{applicationId}":
    get:
      operationId: GetApplication
      summary: Get Application
      description: Returns the specified Enrolment Application.
      security:
        - staging:
          - urn:hero:enrolments:applications
          - urn:hero:enrolments:applications:read
        - production:
          - urn:hero:enrolments:applications
          - urn:hero:enrolments:applications:read
      tags:
        - Enrolments
      parameters:
        - name: applicationId
          description: |-
            applicationId is the unique identifier of the Enrolment Application
            to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsApplicationResponse"

    delete:
      operationId: DeleteApplication
      summary: Delete Application
      description: Removes the specified Enrolment Application.
      security:
        - staging:
          - urn:hero:enrolments:applications:delete
        - production:
          - urn:hero:enrolments:applications:delete
      tags:
        - Enrolments
      parameters:
        - name: applicationId
          description: |-
            applicationId is the unique identifier of the Enrolment Application
            to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/enrolments/v4/schemas":
    get:
      operationId: ListSchemas
      summary: List Schemas
      description: Lists all enrolment application schemas and enables filtering resources.
      security:
        - staging:
          - urn:hero:enrolments:schemas
          - urn:hero:enrolments:schemas:read
        - production:
          - urn:hero:enrolments:schemas
          - urn:hero:enrolments:schemas:read
      tags:
        - Enrolments
      parameters:
        - name: countryCode
          description: |
            countryCode is the ISO 'Alpha 2' code for the country the school
            resides within.
          in: query
          required: false
          schema:
            type: string
            maxLength: 2
        - name: schoolId
          description: |-
            schoolId is the unique identifier of the school obtaining.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: schoolCode
          description: |-
            schoolCode is the code issued by an educational authority.
          in: query
          required: false
          schema:
            type: string
        - name: campusId
          description: campusId is the unique identifier of the School's Campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusCode
          description: |
            campusCode is the short code assigned for the campus. For example,
            'PRI'.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsListSchemasResponse"

    post:
      operationId: CreateSchema
      summary: Create Schema
      description: |
        Creates an Enrolment Application Schema Resource.
        This route is public.
      security:
        - staging:
          - urn:hero:enrolments:schemas
        - production:
          - urn:hero:enrolments:schemas
      tags:
        - Enrolments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/enrolmentsCreateSchemaRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsSchemaResponse"

  "/enrolments/v4/schemas/{schemaId}":
    get:
      operationId: GetSchema
      summary: Get Schema
      description: Gets the specified Enrolment Application Schema.
      security:
        - staging:
          - urn:hero:enrolments:schemas
          - urn:hero:enrolments:schemas:read
        - production:
          - urn:hero:enrolments:schemas
          - urn:hero:enrolments:schemas:read
      tags:
        - Enrolments
      parameters:
        - name: schemaId
          description: |-
            schemaId is the unique identifier of the Enrolment Schema to get
            from the server
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsSchemaResponse"

    put:
      operationId: UpdateSchema
      summary: Update Schema
      description: Updates the specified Enrolment Application Schema.
      security:
        - staging:
          - urn:hero:enrolments:schemas
        - production:
          - urn:hero:enrolments:schemas
      tags:
        - Enrolments
      parameters:
        - name: schemaId
          description: |-
            schemaId is the unique identifier of the Enrolment Schema resource
            on the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/enrolmentsUpdateSchemaRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/enrolmentsSchemaResponse"

    delete:
      operationId: DeleteSchema
      summary: Delete Schema
      description: Deletes the specified Enrolment Application Schema.
      security:
        - staging:
          - urn:hero:enrolments:schemas:delete
        - production:
          - urn:hero:enrolments:schemas:delete
      tags:
        - Enrolments
      parameters:
        - name: schemaId
          description: |-
            schemaId is the unique identifier of the Enrolment Schema resource
            on the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/groups/v4/groups":
    get:
      operationId: ListGroups
      summary: List Groups
      description: Lists all groups and enables filtering resources.
      security:
        - staging:
          - urn:hero:groups:groups
          - urn:hero:groups:groups:read
        - production:
          - urn:hero:groups:groups
          - urn:hero:groups:groups:read
      tags:
        - Groups
      parameters:
        - name: schoolId
          description: schoolId enables filtering by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: campusId enables filtering by school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: groupTemplateId
          description: |
            groupTemplateId enables filtering groups based on a group template
            id.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: groupType
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/groupsGroupType"
        - name: autoGroupType
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/groupsAutoGroupType"
        - name: staffId
          description: staffId enables filtering by staff member.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: caregiverId
          description: caregiverId enables filtering by caregiver.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: learnerId
          description: learnerId enables filtering by learner.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: year
          description: year enables filtering by calendar year.
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: membershipStatuses
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/groupsMemberStatus"
        - name: groups
          description: groups returns the requested list of groups.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: paramValue
          description: paramValue enables filtering auto groups by param value.
          in: query
          required: false
          schema:
            type: string
        - name: learners
          description: |-
            learners enables filtering groups based on a list of learners.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/groupsListGroupsResponse"

    post:
      operationId: CreateGroup
      summary: Create Group
      description: Creates a Group Resource.
      security:
        - staging:
          - urn:hero:groups:groups
        - production:
          - urn:hero:groups:groups
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/groupsCreateGroupRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/groupsGroupResponse"

  "/groups/v4/groups/{groupId}":
    get:
      operationId: GetGroup
      summary: Get Group
      description: Gets the specified Group.
      security:
        - staging:
          - urn:hero:groups:groups
          - urn:hero:groups:groups:read
        - production:
          - urn:hero:groups:groups
          - urn:hero:groups:groups:read
      tags:
        - Groups
      parameters:
        - name: groupId
          description: The specific Group to Get.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/groupsGroupResponse"

    put:
      operationId: UpdateGroup
      summary: Update Group
      description: Updates the specified Group.
      security:
        - staging:
          - urn:hero:groups:groups
        - production:
          - urn:hero:groups:groups
      tags:
        - Groups
      parameters:
        - name: groupId
          description: The specific Group to Update.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/groupsUpdateGroupRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/groupsGroupResponse"

    delete:
      operationId: DeleteGroup
      summary: Delete Group
      description: Deletes the specified Group.
      security:
        - staging:
          - urn:hero:groups:groups:delete
        - production:
          - urn:hero:groups:groups:delete
      tags:
        - Groups
      parameters:
        - name: groupId
          description: The specific Group to delete.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/people/v4/audits":
    get:
      operationId: PeopleListAudits
      summary: List Audits
      description: Lists audit resources and enables filtering resources.
      security:
        - staging:
          - urn:hero:people:people
          - urn:hero:people:people:read
        - production:
          - urn:hero:people:people
          - urn:hero:people:people:read
      tags:
        - People
      parameters:
        - name: schoolId
          description: schoolId enables filtering audits by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: campusId enables filtering audits by campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
        - name: personId
          description: personId enables filtering audits by a person.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: people
          description: people enables filtering audits by multiple people.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: enrolmentId
          description: enrolmentId enables filtering audits by an enrolment.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: dateFrom
          description: |
            dateFrom enables filtering audit resources from a specified date in
            ISO 8601 format (YYYY-MM-DD).
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          description: dateTo enables filtering audit resources to a specified
            date in ISO 8601 format (YYYY-MM-DD).
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleListAuditsResponse"

  "/people/v4/caregivers/:search":
    get:
      operationId: SearchCaregivers
      summary: Search Caregivers
      description: |
        Searches Caregivers across tenants (by email address), returning
        partial results.
      security:
        - staging:
          - urn:hero:people:people
          - urn:hero:people:people:read
        - production:
          - urn:hero:people:people
          - urn:hero:people:people:read
      tags:
        - People
      parameters:
        - name: query
          description: query is the email address to search for.
          in: query
          required: false
          schema:
            type: string
            format: email
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
        - name: first
          description: first is the first name to search for.
          in: query
          required: false
          schema:
            type: string
        - name: last
          description: last is the last name to search for.
          in: query
          required: false
          schema:
            type: string
        - name: home
          description: home is the home phone number to search for.
          in: query
          required: false
          schema:
            type: string
        - name: mobile
          description: mobile is the mobile phone number to search for.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleSearchCaregiversResponse"

  "/people/v4/enrolments":
    get:
      operationId: ListEnrolments
      summary: List Enrolments
      description: Lists learner enrolments and enables filtering resources.
      security:
        - staging:
          - urn:hero:people:enrolments
          - urn:hero:people:enrolments:read
        - production:
          - urn:hero:people:enrolments
          - urn:hero:people:enrolments:read
      tags:
        - People
      parameters:
        - name: schoolId
          description: schoolId enables filtering enrolments by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: campusId enables filtering enrolments by campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: applicationId
          description: applicationId enables filtering enrolments by enrolment application.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: personId
          description: personId enables filtering enrolments by person.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
        - name: jurisdictionalStatus
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/peopleJurisdictionalStatus"
        - name: status
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/peopleEnrolmentStatus"
        - name: statuses
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/peopleEnrolmentStatus"
        - name: people
          in: query
          required: false
          description: people enables filtering enrolments by person.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: caregiverAllowedAccess
          description: |-
            caregiverAllowedAccess filters people based on learner records
            that have enabled access to the provided caregiver person ID.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: query
          description: |-
            query filters people using a text-like search within dynamic fields to
            find matches based on:
              - First Name
              - First Name Legal
              - First Name Preferred
              - Last Name
              - Last Name Legal
              - Last Name Preferred
              - Email Address
              - Student Email Address.
          in: query
          required: false
          schema:
            type: string
        - name: learnerFirstInFamily
          description: |-
            learnerFirstInFamily enables filtering all learner records where
            learners are the oldest member in their family, within a school.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: learnerLastInFamily
          description: |-
            learnerFirstInFamily enables filtering all learner records where
            learners are the youngest member in their family, within a school.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: learnerSiblingPosition
          description: |-
            learnerSiblingPosition enables filtering all learner records based on
            sibling position.
          in: query
          required: false
          schema:
            type: integer
            format: uint32
        - name: learnerSiblingCount
          description: |-
            learnerSiblingCount enables filtering all learner records based on the
            amount of siblings currently enrolled, or pre-enrolled at this school.
          in: query
          required: false
          schema:
            type: integer
            format: uint32
        - name: enrolments
          description: enrolments enables filtering enrolments by enrolment identifiers.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: include
          description: |-
            include enables expanding linked resources in a top level key within the
            list response to help minimise API request traffic via a comma delimited
            list of puralised forms e.g. `people`.
          in: query
          required: false
          schema:
            type: string
        - name: currentLevel
          description: |-
            currentLevel enables filtering learner records based on their current
            jurisdictional level.
            Requires: jurisdiction. For example,
              - A jurisdiction of NZ_MOE given a parameter of "7" would result in
                listing learners in Year 7.
              - A jurisdiction of US_K12 given a parameter of "K" would result in
                listing learners in Grade K (kindergarten).
          in: query
          required: false
          schema:
            type: string
        - name: pendingEnrolment
          description: |-
            pendingEnrolment enables filtering enrolments where the enrolment has a
            status of Pre-Enrolled and has an entry date specified which is either
            today or in the past.
            Note: Specifying this as true will negate any supplied status or
            statuses.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: pendingUnenrolment
          description: |-
            pendingUnenrolment enables filtering enrolments where the enrolment has
            a status of Current and has an exit date specified which is either
            today or in the past.
            Note: Specifying this as true will negate any supplied status or
            statuses.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: asAtDate
          description: |-
            asAtDate enables filtering for learners who were enrolled at the calling
            school as at a specific date, for generating historical reports.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: groupId
          description: |-
            groupId enables filtering for learners who are current members of a
            specified Group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleListEnrolmentsResponse"

    post:
      operationId: CreateEnrolment
      summary: Create Enrolment
      description: Creates an enrolment resource.
      security:
        - staging:
          - urn:hero:people:enrolments
        - production:
          - urn:hero:people:enrolments
      tags:
        - People
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/peopleCreateEnrolmentRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleEnrolmentResponse"

  "/people/v4/enrolments/{enrolmentId}":
    get:
      operationId: GetEnrolment
      summary: Get Enrolment
      description: Gets the specified enrolment resource.
      security:
        - staging:
          - urn:hero:people:enrolments
          - urn:hero:people:enrolments:read
        - production:
          - urn:hero:people:enrolments
          - urn:hero:people:enrolments:read
      tags:
        - People
      parameters:
        - name: enrolmentId
          description: |-
            enrolmentId is the unique enrolment resource to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleEnrolmentResponse"

    put:
      operationId: UpdateEnrolment
      summary: Update Enrolment
      description: Updates the specified enrolment resource.
      security:
        - staging:
          - urn:hero:people:enrolments
        - production:
          - urn:hero:people:enrolments
      tags:
        - People
      parameters:
        - name: enrolmentId
          description: |-
            enrolmentId is the unique enrolment resource to update on the
            server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/peopleUpdateEnrolmentRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleEnrolmentResponse"

  "/people/v4/learners/:bulkUpdateHomeroom":
    post:
      operationId: BulkUpdateHomeroom
      summary: Bulk Update Homeroom
      description: |
        Bulk updates Learners' homerooms, one homeroom group at a time.
      security:
        - staging:
          - urn:hero:people:people
        - production:
          - urn:hero:people:people
      tags:
        - People
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/peopleBulkUpdateHomeroomRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleBulkUpdateHomeroomResponse"

  "/people/v4/learners/:search":
    get:
      operationId: SearchLearners
      summary: Search Learners
      description: |
        Searches Learners across tenants (by jurisdictional ID), returning
        partial results.
      security:
        - staging:
          - urn:hero:people:people
          - urn:hero:people:people:read
        - production:
          - urn:hero:people:people
          - urn:hero:people:people:read
      tags:
        - People
      parameters:
        - name: query
          description: query is the Jurisdictional ID to search for.
          in: query
          required: false
          schema:
            type: string
        - name: legacyId
          description: legacyId is the legacyPersonId to search for.
          in: query
          required: false
          schema:
            type: string
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleSearchLearnersResponse"

  "/people/v4/people":
    get:
      operationId: ListPeople
      summary: List People
      description: |
        Lists all people resources and enables filtering resources.

        Hero makes strong use of dynamic fields due to educational jurisdiction
        differences.

        Fields prepended with `core:` will be stable, as these are the fields
        we deem as being the minimum set required for a specific type of person
        within a Hero tenant.

        # Staff Core Fields
        | Field Key                | Description                                      |
        |--------------------------|:-------------------------------------------------|
        | `core:emailAddress`      | Email address                                    |
        | `core:endDate`           | Employment End Date                              |
        | `core:firstName`         | First name                                       |
        | `core:lastName`          | Last name                                        |
        | `core:phoneHome`         | Home Phone Number                                |
        | `core:phoneMobile`       | Mobile Phone Number                              |
        | `core:staffAllergies`    | Allergies                                        |
        | `core:staffemergName`    | Emergency Contact 1 Name                         |
        | `core:staffemergName2`   | Emergency Contact 2 Name                         |
        | `core:staffemergPhone`   | Emergency Contact 1 Phone Number                 |
        | `core:staffemergPhone2`  | Emergency Contact 2 Phone Number                 |
        | `core:staffemergType1`   | Emergency Contact 1 Relationship to Staff Member |
        | `core:staffemergType2`   | Emergency Contact 2 Relationship to Staff Member |
        | `core:staffempcert`      | Practising Certificate                           |
        | `core:staffempRegoDate`  | Teacher Registration Expiry Date                 |
        | `core:staffempRegoStat`  | Teacher Registration Status                      |
        | `core:staffempVetDate`   | Police Vet Expiry Date                           |
        | `core:staffGender`       | Gender                                           |
        | `core:staffmedCondition` | Medical Conditions                               |
        | `core:staffmeds`         | Medications                                      |
        | `core:staffRole`         | Main Role                                        |
        | `core:startDate`         | Employment Start Date                            |

        # Caregiver Core Fields
        | Field Key           | Description         |
        |---------------------|:--------------------|
        | `core:emailAddress` | Email address       |
        | `core:firstName`    | First Name          |
        | `core:job`          | Occupation          |
        | `core:lastName`     | Last Name           |
        | `core:livesWith`    | Lives with Student  |
        | `core:phoneHome`    | Home Phone Number   |
        | `core:phoneMobile`  | Mobile Phone Number |
        | `core:phoneWork`    | Work Phone Number   |
        | `core:policeVet`    | Police Vet Approved |
        | `core:salutation`   | Title               |

        ## Student Core Fields
        | Field Key                  | Description                                   |
        |----------------------------|:----------------------------------------------|
        | `core:accessArrangements`  | Access Arrangements                           |
        | `core:allergies`           | Allergies                                     |
        | `core:commentPermission`   | Permissions Comment                           |
        | `core:countryBirth`        | Country of Birth                              |
        | `core:criticalInfo`        | Critical information                          |
        | `core:custodyOrder`        | Custody Order                                 |
        | `core:dateArrival`         | Arrival Date (if born overseas)               |
        | `core:dob`                 | Date of Birth                                 |
        | `core:doctor`              | Doctor                                        |
        | `core:enrolmentNumber`     | Enrolment Number                              |
        | `core:eotcPermission`      | EOTC Trip Permission                          |
        | `core:firstaidPermission`  | Permission to Act in the Event of Injury      |
        | `core:firstNameLegal`      | First name (legal)                            |
        | `core:firstNamePreferred`  | First name (preferred)                        |
        | `core:homeLanguage`        | Languages Spoken at Home                      |
        | `core:immunisationComment` | Immunisation Comment                          |
        | `core:immunisations`       | Immunisations                                 |
        | `core:internetPermission`  | Internet Usage                                |
        | `core:lastNameLegal`       | Last name (legal)                             |
        | `core:lastNamePreferred`   | Last name (preferred)                         |
        | `core:medicalCondition`    | Medical condition                             |
        | `core:medicalTreatment`    | Medical treatment                             |
        | `core:middleNames`         | Middle name(s)                                |
        | `core:panadolPermission`   | Permission to Administer Pain Relief          |
        | `core:photoPermission`     | Publication of Student Image and Works        |
        | `core:previousedName`      | Previous School / Early Childhood Centre Name |
        | `core:smsId`               | Legacy SMS Id                                 |
        | `core:studentcellPhone`    | Student's Cellphone Number                    |
        | `core:studentEmailAddress` | Student email address                         |
        | `core:studenthomePhone`    | Student's Home Phone Number                   |

      security:
        - staging:
          - urn:hero:people:people
          - urn:hero:people:people:read
        - production:
          - urn:hero:people:people
          - urn:hero:people:people:read
      tags:
        - People
      parameters:
        - name: schoolId
          description: schoolId filters people based on school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: people
          description: people returns the requested list of people.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: caregiverAllowedAccess
          description: |-
            caregiverAllowedAccess filters people based on learner records
            that have enabled access to the provided caregiver person ID.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: archived
          description: archived enables filtering people based on archival status.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: type
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/peoplePersonType"
        - name: query
          description: |-
            query filters people using a text-like search within dynamic fields to
            find matches based on:
              - First Name
              - First Name Legal
              - First Name Preferred
              - Last Name
              - Last Name Legal
              - Last Name Preferred
              - Email Address
              - Student Email Address.
          in: query
          required: false
          schema:
            type: string
        - name: learnerFirstInFamily
          description: |-
            learnerFirstInFamily enables filtering all learner records where
            learners are the oldest member in their family, within a school.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: learnerLastInFamily
          description: |-
            learnerFirstInFamily enables filtering all learner records where
            learners are the youngest member in their family, within a school.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: learnerSiblingPosition
          description: |-
            learnerSiblingPosition enables filtering all learner records based on
            sibling position.
          in: query
          required: false
          schema:
            type: integer
            format: uint32
        - name: learnerSiblingCount
          description: |-
            learnerSiblingCount enables filtering all learner records based on the
            amount of siblings currently enrolled, or pre-enrolled at this school.
          in: query
          required: false
          schema:
            type: integer
            format: uint32
        - name: caregiverContactOf
          description: |-
            caregiverContactOf enables filtering caregivers being a contact of the
            specified learner.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: includeFormer
          description: |-
            includeFormer enables retrieval of Learners who have left this school,
            as well as current (and pre-enrolled).
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: status
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/peopleEnrolmentStatus"
        - name: statuses
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/peopleEnrolmentStatus"
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
        - name: currentLevel
          description: |-
            currentLevel enables filtering learner records based on their current
            jurisdictional level.
            Requires: jurisdiction. For example,
              - A jurisdiction of NZ_MOE given a parameter of "7" would result in
                listing learners in Year 7.
              - A jurisdiction of US_K12 given a parameter of "K" would result in
                listing learners in Grade K (kindergarten).
          in: query
          required: false
          schema:
            type: string
        - name: include
          description: |-
            include enables expanding linked resources in a top level key within the
            list response to help minimise API request traffic via a comma delimited
            list of puralised forms e.g. `enrolments`.
          in: query
          required: false
          schema:
            type: string
        - name: pendingEnrolment
          description: |-
            pendingEnrolment enables filtering learners where their enrolment has a
            status of Pre-Enrolled and has an entry date specified which is either
            today or in the past.
            Note: Specifying this as true will negate any supplied status or
            statuses.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: pendingUnenrolment
          description: |-
            pendingUnenrolment enables filtering enrolments where the enrolment has
            a status of Current and has an exit date specified which is either
            today or in the past.
            Note: Specifying this as true will negate any supplied status or
            statuses.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: groupId
          description: |-
            groupId enables filtering for learners who are current members of a
            specified Group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleListPeopleResponse"

    post:
      operationId: CreatePerson
      summary: Create Person
      description: Creates a person resource.
      security:
        - staging:
          - urn:hero:people:people
        - production:
          - urn:hero:people:people
      tags:
        - People
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/peopleCreatePersonRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peoplePersonResponse"

  "/people/v4/people/{personId}":
    get:
      operationId: GetPerson
      summary: Get Person
      description: Gets the specified person resource.
      security:
        - staging:
          - urn:hero:people:people
          - urn:hero:people:people:read
        - production:
          - urn:hero:people:people
          - urn:hero:people:people:read
      tags:
        - People
      parameters:
        - name: personId
          description: personId is the unique Person resource to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peoplePersonResponse"

    put:
      operationId: UpdatePerson
      summary: Update Person
      description: Updates the specified person resource.
      security:
        - staging:
          - urn:hero:people:people
        - production:
          - urn:hero:people:people
      tags:
        - People
      parameters:
        - name: personId
          description: personId is the unique Person resource to update on the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/peopleUpdatePersonRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peoplePersonResponse"

    delete:
      operationId: DeletePerson
      summary: Delete Person
      description: Deletes the specified person resource.
      security:
        - staging:
          - urn:hero:people:people:delete
        - production:
          - urn:hero:people:people:delete
      tags:
        - People
      parameters:
        - name: personId
          description: The specific Person to delete.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/people/v4/requests":
    get:
      operationId: ListAccessRequests
      summary: List Access Requests
      description: |-
        Lists all pending access requests resources and enables filtering
        resources.
      security:
        - staging:
          - urn:hero:people:requests
          - urn:hero:people:requests:read
        - production:
          - urn:hero:people:requests
          - urn:hero:people:requests:read
      tags:
        - People
      parameters:
        - name: personId
          description: personId filters access requests by person.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: schoolId
          description: schoolId filters access requests by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: isPending
          description: isPending filters access requests for pending requests.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleListAccessRequestsResponse"

    post:
      operationId: CreateAccessRequest
      summary: Create Access Request
      description: Creates an access request resource.
      security:
        - staging:
          - urn:hero:people:requests
        - production:
          - urn:hero:people:requests
      tags:
        - People
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/peopleCreateAccessRequestRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleAccessRequestResponse"

  "/people/v4/requests/{requestId}":
    get:
      operationId: GetAccessRequest
      summary: Get Access Request
      description: Gets the specified access request resource.
      security:
        - staging:
          - urn:hero:people:requests
          - urn:hero:people:requests:read
        - production:
          - urn:hero:people:requests
          - urn:hero:people:requests:read
      tags:
        - People
      parameters:
        - name: requestId
          description: requestId is the unique access request resource to get from the
            server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/peopleAccessRequestResponse"

    delete:
      operationId: DeleteAccessRequest
      summary: Delete Access Request
      description: Deletes the specified access request resource.
      security:
        - staging:
          - urn:hero:people:people:delete
        - production:
          - urn:hero:people:people:delete
      tags:
        - People
      parameters:
        - name: requestId
          description: |-
            requestId is the unique access request resource to delete from the
            server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/schools/v4/schema/optiongroups":
    get:
      operationId: ListOptionGroups
      summary: List Option Groups
      description: Lists school option group schema resources.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsListOptionGroupsResponse"

  "/schools/v4/schema/optiongroups/{optionGroupId}":
    get:
      operationId: GetOptionGroup
      summary: Get Option Group
      description: Gets the specified option group schema resource.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: optionGroupId
          description: |-
            optionGroupId is the specific option group to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsOptionGroupResponse"

  "/schools/v4/schema/optionheadings":
    get:
      operationId: ListOptionHeadings
      summary: List Option Headings
      description: |-
        Lists school option heading schema resources and enables filtering
        resources.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: optionGroupId
          description: |-
            optionGroupId filters option headings based on an option group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsListOptionHeadingsResponse"

  "/schools/v4/schema/optionheadings/{optionHeadingId}":
    get:
      operationId: GetOptionHeading
      summary: Get Option Heading
      description: Gets the specified option heading schema resource.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: optionHeadingId
          description: The specific option heading to get.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsOptionHeadingResponse"

  "/schools/v4/schema/options":
    get:
      operationId: ListOptions
      summary: List Options
      description: Lists school option schema resources and enables filtering resources.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: optionGroupId
          description: optionGroupId enables filtering options by option group.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: optionHeadingId
          description: |-
            optionHeadingId enables filtering options by option heading.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: optionSetIds
          description: |
            optionSetIds enables filtering options by option sets. This should
            contain a serialised json array in string form, which doesn't have
            to be url encoded.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsListOptionsResponse"

  "/schools/v4/schema/options/{optionId}":
    get:
      operationId: GetOption
      summary: Get Option
      description: Gets the specified option schema resource.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: optionId
          description: optionId is the specific option to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsOptionResponse"

  "/schools/v4/schools":
    get:
      operationId: ListSchools
      summary: List Schools
      description: Lists all school resources and enables filtering resources.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: schoolId
          description: schoolId enables filtering by school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: schoolIds
          description: |-
            schoolIds enables retrieval of a list of specific schools.
          in: query
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
        - name: jurisdictionalId
          description: |-
            jurisdictionalId enables filtering schools by their jurisdictional
            id.
          in: query
          required: false
          schema:
            type: string
        - name: metaOnly
          description: metaOnly enables retrieval of only basic school data.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsListSchoolsResponse"

  "/schools/v4/schools/{schoolId}":
    get:
      operationId: GetSchool
      summary: Get School
      description: Gets the specified School.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: schoolId
          description: The specific School to Get.
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: metaOnly
          description: metaOnly enables retrieval of only basic school data.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: jurisdiction
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/Jurisdiction"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsSchoolResponse"

    put:
      operationId: UpdateSchool
      summary: Update Schools
      description: Updates the specified School.
      security:
        - staging:
          - urn:hero:schools:schools
        - production:
          - urn:hero:schools:schools
      tags:
        - Schools
      parameters:
        - name: schoolId
          description: The specific School to Update.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/schoolsUpdateSchoolRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsSchoolResponse"

    delete:
      operationId: DeleteSchool
      summary: Delete School
      description: Deletes the specified school resource.
      security:
        - staging:
          - urn:hero:schools:schools:delete
        - production:
          - urn:hero:schools:schools:delete
      tags:
        - Schools
      parameters:
        - name: schoolId
          description: The specific School to delete.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

  "/schools/v4/schools/{schoolId}/options":
    get:
      summary: List School Options
      description: |
        Lists the specified school options and enables filtering resources.

        This returns a payload containing the schools options, and meta
        information about a school's options schema. That is, Options,
        OptionHeadings and the OptionGroups.
      security:
        - staging:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
        - production:
          - urn:hero:schools:schools
          - urn:hero:schools:schools:read
      tags:
        - Schools
      parameters:
        - name: schoolId
          description: The specific School to get school options for.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/schoolsSchoolOptionsResponse"

  "/timetable/v4/periods":
    get:
      operationId: ListPeriods
      summary: List Periods
      description: |-
        Lists timetabled period resources and enables filtering resources.
      security:
        - staging:
          - urn:hero:timetable:periods
          - urn:hero:timetable:periods:read
        - production:
          - urn:hero:timetable:periods
          - urn:hero:timetable:periods:read
      tags:
        - Timetable
      parameters:
        - name: schoolId
          description: schoolId enables filtering periods by a school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: campusId enables filtering periods by a school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: structureId
          description: |-
            structureId enables filtering periods by a timetable structure.
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/timetableListPeriodsResponse"

    post:
      operationId: CreatePeriod
      summary: Create Period
      description: Creates a period resource.
      security:
        - staging:
          - urn:hero:timetable:periods
        - production:
          - urn:hero:timetable:periods
      tags:
        - Timetable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/timetableCreatePeriodRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/timetablePeriodResponse"

  "/timetable/v4/periods/{periodId}":
    get:
      operationId: GetPeriod
      summary: Get Period
      description: Gets the specified period resource.
      security:
        - staging:
          - urn:hero:timetable:periods
          - urn:hero:timetable:periods:read
        - production:
          - urn:hero:timetable:periods
          - urn:hero:timetable:periods:read
      tags:
        - Timetable
      parameters:
        - name: periodId
          description: |-
            periodId is the unique period resource to get from the server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/timetablePeriodResponse"

  "/timetable/v4/structures":
    get:
      operationId: ListStructures
      summary: List Structures
      description: |-
        Lists timetable structure resources and enables filtering resources.

        A structure defines a weekly structure of days and linked periods for
        a given day.

        Using the timetable information, you can query to find out on a given
        date what timetable structure is the current one to use.

        To discover what school period the school is currently in, you will
        need to calculate this manually using your own time libraries, working
        out the current ISO day number to drill into the correct day within the
        timetable strucure. From here, iterate over the period ids
        (which are ordered), to calculate if `time.Now()` is within said period
        based on the time the period starts and the duration of said period.
      security:
        - staging:
          - urn:hero:timetable:structures
          - urn:hero:timetable:structures:read
        - production:
          - urn:hero:timetable:structures
          - urn:hero:timetable:structures:read
      tags:
        - Timetable
      parameters:
        - name: schoolId
          description: |-
            schoolId enables filtering timetable structures by a school.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: campusId
          description: |-
            campusId enables filtering timetable structures by a school campus.
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: archived
          description: |-
            archived enables filtering for archived timetable structures.
          in: query
          required: false
          schema:
            type: boolean
            format: boolean
        - name: date
          description: |-
            date enables filtering timetable structures by a given date in ISO
            8601 format (YYYY-MM-DD).
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: include
          description: |-
            include enables expanding linked resources in a top level key
            within the list response to help minimise API request traffic via a
            comma delimited list of pluralised forms e.g. `periods`.
          in: query
          required: false
          schema:
             type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/timetableListStructuresResponse"

    post:
      operationId: CreateStructure
      summary: Create Structure
      description: Creates a timetable structure resource.
      security:
        - staging:
          - urn:hero:timetable:structures
        - production:
          - urn:hero:timetable:structures
      tags:
        - Timetable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/timetableCreateStructureRequest"
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/timetableStructureResponse"

  "/timetable/v4/structures/{structureId}":
    get:
      operationId: GetStructure
      summary: Get Structure
      description: Gets the specified timetable structure resource.
      security:
        - staging:
          - urn:hero:timetable:structures
          - urn:hero:timetable:structures:read
        - production:
          - urn:hero:timetable:structures
          - urn:hero:timetable:structures:read
      tags:
        - Timetable
      parameters:
        - name: structureId
          description: |-
            structureId is the unique structure resource to get from the
            server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/timetableStructureResponse"

  "/timetable/v4/structures/{structureId}/:archive":
    post:
      operationId: ArchiveStructure
      summary: Archive Structure
      description: Marks the specified timetable structure resource as archived.
      security:
        - staging:
          - urn:hero:timetable:structures:archive
        - production:
          - urn:hero:timetable:structures:archive
      tags:
        - Timetable
      parameters:
        - name: structureId
          description: |-
            structureId is the unique structure resource to archive on the
            server.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"

components:
  securitySchemes:
    staging:
      type: oauth2
      description: |
        Hero makes use of OAuth 2.0 to enable developers to easily integrate
        with our system, but still allow a transparent understanding for
        schools around the data each integration is allowed to access.
      flows:
        clientCredentials:
          tokenUrl: https://staging-id.linc-ed.com/oauth/token
          scopes:
            # Jurisdiction Scopes
            urn:hero:jurisdictions:nz:moe: Enables access to schools from New Zealand that are under the Ministry of Education's jurisdiction.
            urn:hero:jurisdictions:intl:nz: Enables access to independant schools, which are not under any educational jurisdiction.
            # Service/Resource Level Scopes
            # Attendance Service
            urn:hero:attendance:audits:read: Enables access to read attendance audit logs.
            urn:hero:attendance:records: Enables access to create, read and update attendance records.
            urn:hero:attendance:records:read: Enables access to read attendance records.
            urn:hero:attendance:records:delete: Enables access to delete attendance records.
            urn:hero:attendance:registers: Enables access to create, read and update group/class attendance registers.
            urn:hero:attendance:registers:read: Enables access to read group/class attendance registers.
            urn:hero:attendance:registers:delete: Enables access to delete group/class attendance registers.
            # Auth Service
            urn:hero:auth:clients: Enables access to create, read and update oauth clients.
            urn:hero:auth:clients:read: Enables access to read oauth clients.
            urn:hero:auth:clients:delete: Enables access to delete oauth clients.
            urn:hero:auth:users: Enables access to create, read and update oauth users.
            urn:hero:auth:users:read: Enables access to read oauth users.
            urn:hero:auth:users:delete: Enables access to delete oauth users.
            # Dates Service
            urn:hero:dates:dates: Enables access to create, read and update school dates.
            urn:hero:dates:dates:read: Enables access to read school dates.
            urn:hero:dates:dates:delete: Enables access to delete school dates.
            # Groups Service
            urn:hero:groups:groups: Enables access to create, read and update groups.
            urn:hero:groups:groups:read: Enables access to read groups.
            urn:hero:groups:groups:delete: Enables access to delete groups.
            # People Service
            urn:hero:people:enrolments: Enables access to create, read and update people enrolments.
            urn:hero:people:enrolments:read: Enables access to read people enrolments.
            urn:hero:people:enrolments:delete: Enables access to delete people enrolments.
            urn:hero:people:people: Enables access to create, read and update people.
            urn:hero:people:people:read: Enables access to read people.
            urn:hero:people:people:delete: Enables access to delete people.
            urn:hero:people:requests: Enables access to create, read and update access requests for people.
            urn:hero:people:requests:read: Enables access to read access requests for people.
            urn:hero:people:requests:delete: Enables access to delete access requests for people.
            # Schools Service
            urn:hero:schools:schools: Enables access to create, read and update schools.
            urn:hero:schools:schools:read: Enables access to read schools.
            urn:hero:schools:schools:delete: Enables access to delete schools.
            # Timetable Service
            urn:hero:timetable:periods: Enables access to create and read school periods.
            urn:hero:timetable:periods:read: Enables access to read school periods.
            urn:hero:timetable:structures: Enables access to create and read school timetable structures.
            urn:hero:timetable:structures:read: Enables access to read school timetable structures.
            urn:hero:timetable:structures:archive: Enables access to archive school timetable structures.

    production:
      type: oauth2
      description: |
        Hero makes use of OAuth 2.0 to enable developers to easily integrate
        with our system, but still allow a transparent understanding for
        schools around the data each integration is allowed to access.
      flows:
        clientCredentials:
          tokenUrl: https://id.linc-ed.com/oauth/token
          scopes:
            # Jurisdiction Scopes
            urn:hero:jurisdictions:nz:moe: Enables access to schools from New Zealand that are under the Ministry of Education's jurisdiction.
            urn:hero:jurisdictions:intl:nz: Enables access to independant schools, which are not under any educational jurisdiction.
            # Service/Resource Level Scopes
            # Attendance Service
            urn:hero:attendance:audits:read: Enables access to read attendance audit logs.
            urn:hero:attendance:records: Enables access to create, read and update attendance records.
            urn:hero:attendance:records:read: Enables access to read attendance records.
            urn:hero:attendance:records:delete: Enables access to delete attendance records.
            urn:hero:attendance:registers: Enables access to create, read and update group/class attendance registers.
            urn:hero:attendance:registers:read: Enables access to read group/class attendance registers.
            urn:hero:attendance:registers:delete: Enables access to delete group/class attendance registers.
            # Auth Service
            urn:hero:auth:clients: Enables access to create, read and update oauth clients.
            urn:hero:auth:clients:read: Enables access to read oauth clients.
            urn:hero:auth:clients:delete: Enables access to delete oauth clients.
            urn:hero:auth:users: Enables access to create, read and update oauth users.
            urn:hero:auth:users:read: Enables access to read oauth users.
            urn:hero:auth:users:delete: Enables access to delete oauth users.
            # Dates Service
            urn:hero:dates:dates: Enables access to create, read and update school dates.
            urn:hero:dates:dates:read: Enables access to read school dates.
            urn:hero:dates:dates:delete: Enables access to delete school dates.
            # Groups Service
            urn:hero:groups:groups: Enables access to create, read and update groups.
            urn:hero:groups:groups:read: Enables access to read groups.
            urn:hero:groups:groups:delete: Enables access to delete groups.
            # People Service
            urn:hero:people:enrolments: Enables access to create, read and update people enrolments.
            urn:hero:people:enrolments:read: Enables access to read people enrolments.
            urn:hero:people:enrolments:delete: Enables access to delete people enrolments.
            urn:hero:people:people: Enables access to create, read and update people.
            urn:hero:people:people:read: Enables access to read people.
            urn:hero:people:people:delete: Enables access to delete people.
            urn:hero:people:requests: Enables access to create, read and update access requests for people.
            urn:hero:people:requests:read: Enables access to read access requests for people.
            urn:hero:people:requests:delete: Enables access to delete access requests for people.
            # Schools Service
            urn:hero:schools:schools: Enables access to create, read and update schools.
            urn:hero:schools:schools:read: Enables access to read schools.
            urn:hero:schools:schools:delete: Enables access to delete schools.
            # Timetable Service
            urn:hero:timetable:periods: Enables access to create and read school periods.
            urn:hero:timetable:periods:read: Enables access to read school periods.
            urn:hero:timetable:structures: Enables access to create and read school timetable structures.
            urn:hero:timetable:structures:read: Enables access to read school timetable structures.
            urn:hero:timetable:structures:archive: Enables access to archive school timetable structures.

  schemas:
    # Shared Schemas
    DataType:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      default: 0
      description: |-
        DataType specifies the static type for a piece of data, which in turns
        informs from which field the data should be obtained from within a
        dynamic field.

        - DataType_Unspecified (0) is the null value, and therefore illegal.
        - DataType_String (1) provides string typed data.
        - DataType_List (2) is provided for data like tags, or chip based
          information where they can be dynamically added, reordered and
          deleted.
        - DataType_Int (3) provides integer typed data.
        - DataType_Float (4) provides float typed data.
        - DataType_Bool (5) provides boolean typed data.
        - DataType_ValueList (6) provides a typed object of key:value like data
          contained within the `valueValueList` field.
          For example:
          ```json
          [
            { "value": "N", "label": 'Not Achieved' },
            { "value": "A", "label": 'Achieved' },
            { "value": "M", "label": 'Merit' },
            { "value": "E", "label": 'Excellence' },
          ]
          ```

    Empty:
      type: object
      description: Empty provides an empty message back for JSON clients.
      properties:
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    FieldOption:
      type: object
      properties:
        value:
          type: string
          description: |-
            value contains a code to be used.
            For example, "NA"
        label:
          type: string
          description: |-
            label contains a human understandable label.
            For example, "Not Achieved"
      description: |-
        FieldOption contains the list of options for items such as value list, drop
        down select fields e.t.c.

    FieldValue:
      type: object
      description: |-
        FieldValue provides a way to add dynamic fields and un/marshal them as they
        will contain varying datatypes.
      properties:
        datatype:
          "$ref": "#/components/schemas/DataType"
        valueString:
          type: string
          description: |-
            valueString stores a value for the string datatype.
            For example, 'apple'.
        valueList:
          type: array
          items:
            type: string
          description: |-
            valueList stores the values for the list datatype.
            For example, ['apple', 'banana']
        valueInt:
          type: integer
          format: int64
          description: |-
            valueInt stores a value for the integer datatype.
            For example, 90210.
        valueFloat:
          type: number
          format: float
          description: |-
            valueFloat stores a value for the float datatype.
            For example, 1.20156
        valueBool:
          type: boolean
          format: boolean
          description: |-
            valueBool stores a value for the boolean datatype.
            For example, false.
        valueValueList:
          type: array
          items:
            "$ref": "#/components/schemas/FieldOption"
          description: |-
            valueValueList stores values for the value list datatype in a key:value
            format, a binding between a human readable label and the code it is
            bound to.
            For example:
            ```json
            [
              { "value": "N", "label": 'Not Achieved' },
              { "value": "A", "label": 'Achieved' },
              { "value": "M", "label": 'Merit' },
              { "value": "E", "label": 'Excellence' },
            ]
            ```

    InputType:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
      default: 0
      description: |-
        InputType is the datatype the field will take when displayed via an HTML UI.

         - InputType_Unspecified (0) is the null value, and therefore illegal.
         - InputType_Text (1) specifies that this data should be input using a
           text field.
         - InputType_Textfield (2) specifies that this data should be input using
           a text box.
         - InputType_Radio (3) specifies that this data should be input using a
           radio or option button.
         - InputType_Checkbox (4) specifies that this data should be input using
           a check box.
         - InputType_Date (5) specifies that this data should be input using a
           date selector.
         - InputType_Email (6) specifies that this data should be input using a
           text field, with email validation.
         - InputType_Number (7) specifies that this data should be input using a
           text field, with number validation.
         - InputType_Url (8) specifies that this data should be input using a
           text field, with URI validation.
         - InputType_Select (9) specifies that this data should be input using a
           list of values in a dropdown select list.
         - InputType_MultiSelect (10) specifies that this data should be input
           using a lookup, as multi-select displays a human understandable label to
           a value. For example, { 'Not Achieved': 'NA' }
         - InputType_Switch (11) specifies that this data should be input using a
           boolean on/off switch.
         - InputType_Color (12) specifies that this data should be input using a
           colour palette selector.
         - InputType_EditableList (13) is similar to select, but enables the user
           to edit the list of values.
         - InputType_JurisdictionalId (14) is a special field type which is tied to
           Person.JurisdictionalId. It has custom validation logic and UI to
           support (for instance) NZ MOE Get/CheckNSN functionality.
         - InputType_File (15) enables a user to upload a single piece of media.
         - InputType_Title (16) provides a field for displaying a Title.
         - InputType_Description (17) provides a field for displaying a
           description or notes.

    Jurisdiction:
      type: integer
      enum:
        - 0
        - 1
        - 2
      default: 0
      description: |-
        Jurisdiction provides ENUMs for the jurisdictional educational authorities
        that we cater for.

         - Jurisdiction_UNSPECIFIED (0) is null, and therefore illegal.
         - Jurisdiction_NZ_MOE (1) specifies the Ministry of Education as the
           educational authority for learners in New Zealand.
         - Jurisdiction_INDEPENDENT_SCHOOL (2) specifies that this school is
           independent of any jurisdictional educational authority, or should be
           treated as such.

    RelationshipType:
      type: integer
      description: |-
        RelationshipType provides enums for the various relationships one may
        have with a contact.

         - RelationshipType_UNSPECIFIED (0) is null, and therefore illegal.
         - RelationshipType_MOTHER (1).
         - RelationshipType_FATHER (2).
         - RelationshipType_UNCLE (3).
         - RelationshipType_AUNT (4).
         - RelationshipType_GRANDMOTHER (5).
         - RelationshipType_GRANDFATHER (6).
         - RelationshipType_SISTER (7).
         - RelationshipType_BROTHER (8).
         - RelationshipType_SISTER_IN_LAW (9).
         - RelationshipType_BROTHER_IN_LAW (10).
         - RelationshipType_SPOUSE (11).
         - RelationshipType_GUARDIAN (12).
         - RelationshipType_CAREGIVER (13).
         - RelationshipType_STEPMOTHER (14).
         - RelationshipType_STEPFATHER (15).
         - RelationshipType_STEPBROTHER (16).
         - RelationshipType_STEPSISTER (17).
         - RelationshipType_FOSTER_PARENT (18).
         - RelationshipType_PARENT (51).
         - RelationshipType_GRANDPARENT (52).
         - RelationshipType_STEPPARENT (53).
         - RelationshipType_SIBLING (54).
         - RelationshipType_STEPSIBLING (55).
         - RelationshipType_FAMILY_FRIEND (56).
         - RelationshipType_REUNIFICATION_CONTACT (57).
         - RelationshipType_OTHER (100) default relationship type if the relationship type is unknown.
      default: 100
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 51
        - 52
        - 53
        - 54
        - 55
        - 56
        - 57
        - 100

    StatusCode:
      type: integer
      enum:
        - 0
        - 100
        - 101
        - 102
        - 200
        - 201
        - 202
        - 203
        - 204
        - 205
        - 206
        - 207
        - 208
        - 226
        - 300
        - 301
        - 302
        - 303
        - 304
        - 305
        - 307
        - 308
        - 400
        - 401
        - 402
        - 403
        - 404
        - 405
        - 406
        - 407
        - 408
        - 409
        - 410
        - 411
        - 412
        - 413
        - 414
        - 415
        - 416
        - 417
        - 418
        - 421
        - 422
        - 423
        - 424
        - 425
        - 426
        - 428
        - 429
        - 431
        - 444
        - 451
        - 494
        - 499
        - 500
        - 501
        - 502
        - 503
        - 504
        - 505
        - 506
        - 507
        - 508
        - 510
        - 511
        - 599
      default: 0
      description: |-
        HTTPStatusCode provides all the known HTTP status codes. Since these codes
        are well known, it makes sense to use them as an easy way to detect, over
        the wire, if a message has been malformed, errors have happened or processed
        correctly.

         - STATUS_UNSPECIFIED (0) is null, and therefore illegal.
         - STATUS_CONTINUE (100) response code indicates that everything so far is
           OK and that the client should continue with the request or ignore it if
           it is already finished.
         - STATUS_SWITCHING_PROTOCOLS (101) response code indicates the protocol
           the server is switching to as requested by a client which sent the
           message including the Upgrade request header.
         - STATUS_PROCESSING (102) response code indicates that the server has
           received and is processing the request, but no response is available yet.
         - STATUS_OK (200) response code provides the Standard response for
           successful HTTP requests. In a GET request, the response will contain an
           entity corresponding to the requested resource. In a POST request, the
           response will contain an entity describing or  containing the result of
           the action.
         - STATUS_CREATED (201) response code specifies that the request has been
           fulfilled, resulting in the creation of a new resource.
         - STATUS_ACCEPTED (202) the request has been accepted for processing, but
           the processing has not been completed.
         - STATUS_NONAUTHORITATIVE_INFORMATION (203) The server is a transforming
           proxy (e.g. a Web accelerator) that received a 200 OK from its origin,
           but is returning a modified version of the origin's response.
         - STATUS_NO_CONTENT (204) The server successfully processed the request
           and is not returning any content.
         - STATUS_RESET_CONTENT (205) The server successfully processed the request,
           but is not returning any content. Unlike a 204 response, this response
           requires that the requester reset the document view.
         - STATUS_PARTIAL_CONTENT (206) The server is delivering only part of the
           resource (byte serving) due to a range header sent by the client. The
           range header is used by HTTP clients to enable resuming of interrupted
           downloads, or split a download into multiple simultaneous streams.
         - STATUS_MULTI_STATUS (207) The message body that follows is by default an
           XML message and can contain a number of separate response codes,
           depending on how many sub-requests were made.
         - STATUS_ALREADY_REPORTED (208) The members of a DAV binding have already
           been enumerated in a preceding part of the (multistatus) response, and
           are not being included again.
         - STATUS_IM_USED (226) The server has fulfilled a request for the resource,
           and the response is a representation of the result of one or more
           instance-manipulations applied to the current instance.
         - STATUS_MULTIPLE_CHOICES (300) Indicates multiple options for the
           resource from which the client may choose (via agent-driven content
           negotiation). For example, this code could be used to present multiple
           video format options, to list files with different filename extensions,
           or to suggest word-sense disambiguation.
         - STATUS_MOVED_PERMANENTLY (301) This and all future requests should be
           directed to the given URI.
         - STATUS_FOUND (302) Tells the client to look at (browse to) another URL.
           302 has been superseded by 303 and 307.
         - STATUS_SEE_OTHER (303) The response to the request can be found under
           another URI using the GET method. When received in response to a POST
           (or PUT/DELETE), the client should presume that the server has received
           the data and should issue a new GET request to the given URI.
         - STATUS_NOT_MODIFIED (304) Indicates that the resource has not been
           modified since the version specified by the request headers
           If-Modified-Since or If-None-Match. In such case, there is no need to
           retransmit the resource since the client still has a previously
           downloaded copy.
         - STATUS_USE_PROXY (305) The requested resource is available only through
           a proxy, the address for which is provided in the response. For security
           reasons, many HTTP clients (such as Mozilla Firefox and Internet
           Explorer) do not obey this status code.
         - STATUS_TEMPORARY_REDIRECT (307) No longer used. Originally meant
           "Subsequent requests should use the specified proxy."
         - STATUS_PERMANENT_REDIRECT (308) In this case, the request should be
           repeated with another URI; however, future requests should still use the
           original URI. In contrast to how 302 was historically implemented, the
           request method is not allowed to be changed when reissuing the original
           request. For example, a POST request should be repeated using another
           POST request.
         - STATUS_BAD_REQUEST (400) The server cannot or will not process the
           request due to an apparent client error (e.g., malformed request syntax,
           size too large, invalid request message framing, or deceptive request
           routing).
         - STATUS_UNAUTHORIZED (401) Similar to 403 Forbidden, but specifically for
           use when authentication is required and has failed or has not yet been
           provided. 401 semantically means "unauthorised", the user does not have
           valid authentication credentials for the target resource.
         - STATUS_PAYMENT_REQUIRED (402) Reserved for future use.
           The original intention was that this code might be used as part of some
           form of digital cash or micropayment scheme, but that has not yet
           happened, and this code is not usually used. Google Developers API uses
           this status if a particular developer has exceeded the daily limit on
           requests.
         - STATUS_FORBIDDEN (403) The request contained valid data and was
           understood by the server, but the server is refusing action. This may be
           due to the user not having the necessary permissions for a resource or
           needing an account of some sort, or attempting a prohibited action (e.g.
           creating a duplicate record where only one is allowed).
           The request should not be repeated.
         - STATUS_NOT_FOUND (404) The requested resource could not be found but may
           be available in the future. Subsequent requests by the client are
           permissible.
         - STATUS_METHOD_NOT_ALLOWED (405) A request method is not supported for
           the requested resource; for example, a GET request on a form that
           requires data to be presented via POST, or a PUT request on a read-only
           resource.
         - STATUS_NOT_ACCEPTABLE (406) The requested resource is capable of
           generating only content not acceptable according to the Accept headers
           sent in the request.
         - STATUS_PROXY_AUTHENTICATION_REQUIRED (407) The client must first
           authenticate itself with the proxy.
         - STATUS_REQUEST_TIMEOUT (408) The server timed out waiting for the
           request.
         - STATUS_CONFLICT (409) Indicates that the request could not be processed
           because of conflict in the current state of the resource, such as an
           edit conflict between multiple simultaneous updates.
         - STATUS_GONE (410) Indicates that the resource requested is no longer
           available and will not be available again.
         - STATUS_LENGTH_REQUIRED (411) The request did not specify the length of
           its content, which is required by the requested resource.
         - STATUS_PRECONDITION_FAILED (412) The server does not meet one of the
           preconditions that the requester put on the request header fields.
         - STATUS_PAYLOAD_TOO_LARGE (413) The request is larger than the server is
           willing or able to process. Previously called "Request Entity Too Large".
         - STATUS_REQUEST_URI_TOO_LONG (414) The URI provided was too long for the
           server to process.
         - STATUS_UNSUPPORTED_MEDIA_TYPE (415) The request entity has a media type
           which the server or resource does not support. For example, the client
           uploads an image as image/svg+xml, but the server requires that images
           use a different format.
         - STATUS_REQUESTED_RANGE_NOT_SATISFIABLE (416) The client has asked for a
           portion of the file (byte serving), but the server cannot supply that
           portion.
         - STATUS_EXPECTATION_FAILED (417) The server cannot meet the requirements
           of the Expect request-header field.
         - STATUS_IM_A_TEAPOT (418) This code was defined in 1998 as one of the
           traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot
           Control Protocol, and is not expected to be implemented by actual HTTP
           servers.
         - STATUS_MISDIRECTED_REQUEST (421) The request was directed at a server
           that is not able to produce a response.
         - STATUS_UNPROCESSABLE_ENTITY (422) The request was well-formed but was
           unable to be followed due to semantic errors.
         - STATUS_LOCKED (423) The resource that is being accessed is locked.
         - STATUS_FAILED_DEPENDENCY (424) The request failed because it depended on
           another request and that request failed (e.g., a PROPPATCH).
         - STATUS_TOO_EARLY (425) Indicates that the server is unwilling to risk
           processing a request that might be replayed.
         - STATUS_UPGRADE_REQUIRED (426) The client should switch to a different
           protocol such as TLS/1.0, given in the Upgrade header field.
         - STATUS_PRECONDITION_REQUIRED (428) The origin server requires the
           request to be conditional.
         - STATUS_TOO_MANY_REQUESTS (429) The user has sent too many requests in a
           given amount of time. Intended for use with rate-limiting schemes.
         - STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE (431) The server is unwilling to
           process the request because either an individual header field, or all
           the header fields collectively, are too large.
         - STATUS_CONNECTION_CLOSED_WITHOUT_RESPONSE (444) Used internally to
           instruct the server to return no information to the client and close the
           connection immediately.
         - STATUS_UNAVAILABLE_FOR_LEGAL_REASONS (451) A server operator has
           received a legal demand to deny access to a resource or to a set of
           resources that includes the requested resource.
         - STATUS_REQUEST_HEAEDER_TOO_LARGE (494) Client sent too large request or
           too long header line.
         - STATUS_CLIENT_CLOSED_REQUEST (499) Used when the client has closed the
           request before the server could send a response.
         - STATUS_INTERNAL_SERVER_ERROR (500) A generic error message, given when
           an unexpected condition was encountered and no more specific message is
           suitable.
         - STATUS_NOT_IMPLEMENTED (501) The server either does not recognize the
           request method, or it lacks the ability to fulfil the request.
           Usually this implies future availability.
         - STATUS_BAD_GATEWAY (502) The server was acting as a gateway or proxy and
           received an invalid response from the upstream server.
         - STATUS_SERVICE_UNAVAILABLE (503) The server cannot handle the request
           because it is overloaded or down for maintenance.
         - STATUS_GATEWAY_TIMEOUT (504) The server was acting as a gateway or proxy
           and did not receive a timely response from the upstream server.
         - STATUS_HTTP_VERSION_NOT_SUPPORTED (505) The server does not support the
           HTTP protocol version used in the request.
         - STATUS_VARIANT_ALSO_NEGOTIATES (506) Transparent content negotiation for
           the request results in a circular reference.
         - STATUS_INSUFFICIENT_STORAGE (507) The server is unable to store the
           representation needed to complete the request.
         - STATUS_LOOP_DETECTED (508) The server detected an infinite loop while
           processing the request (sent instead of 208 Already Reported).
         - STATUS_NOT_EXTENDED (510) Further extensions to the request are required
           for the server to fulfil it.
         - STATUS_NETWORK_AUTHENTICATION_REQUIRED (511) The client needs to
           authenticate to gain network access. Intended for use by intercepting
           proxies used to control access to the network (e.g., "captive portals"
           used to require agreement to Terms of Service before granting full
           Internet access via a Wi-Fi hotspot).
         - STATUS_NETWORK_CONNECT_TIMEOUT_ERROR (599) response code is used by some
           HTTP proxies to signal a network connect timeout behind the proxy to a
           client in front of the proxy.

    # Service Specific Schemas
    attendanceAttendanceAnalysis:
      type: object
      description: |-
        AttendanceAnalysis provides structured information about an attendance
        analysis report.
      properties:
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school which this analysis
            is for.
        personId:
          type: string
          format: uuid
          description: |-
            personId is the unique identifier of the Person (Student) who this
            analysis is for.
        counts:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: |-
            counts is the meat of the analysis, providing a map of attendance
            codes to their number of occurrences.
        total:
          type: integer
          format: int64
          description: |-
            total is the total number of attendance records for this Student
            within the specified period.

    attendanceAudit:
      type: object
      description: |-
        Audit provides structured information about an attendance audit log.
        This is used to log and track attendance changes whenever an attendance
        record is changed.
      properties:
        id:
          type: string
          format: uuid
          description: id is the audit record's unique identifier.
        createTime:
          type: integer
          format: int64
          description: |
            createTime is when the resource was created in seconds from the
            epoch.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school the attendance
            audit log relates to.
        recordId:
          type: string
          format: uuid
          description: |-
            recordId is the unique identifier of the attendance record this
            audit log is linked to.
        date:
          type: string
          format: date
          description: |-
            date contains the date the attendance was recorded against as a
            string to facilitate filtering.
        originalAuthorId:
          format: uuid
          type: string
          description: |-
            originalAuthorId provides the unique identifier of the original
            attendance marker.
        newAuthorId:
          type: string
          format: uuid
          description: |
            newAuthorId provides the unique identifier of the new attendance
            marker.
        originalCode:
          type: string
          description: |
            originalCode provides the previously recorded attendance code.
        newCode:
          type: string
          description: |
            newCode provides the newly recorded attendance code.
        reason:
          type: string
          description: |
            reason provides a description as to why the attendance edit was
            made.

    attendanceBulkCreateRecordsRequest:
      type: object
      description: |-
        BulkCreateRecordsRequest contains the request required to create multiple
        attendance records in a single request.
      properties:
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"
          description: |
            records contains a list of attendance records to create on the
            server.

    attendanceBulkCreateRegistersRequest:
      type: object
      description: |-
        BulkCreateRegistersRequest contains the request required to create
        multiple attendance registers in a single request.
      properties:
        registers:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRegister"
          description: |-
            registers contains a list of attendance registers to create on the
            server.

    attendanceBulkUpdateRecordsRequest:
      type: object
      description: |-
        BulkUpdateRecordsRequest contains the request required to update
        multiple attendance records in a single request.
      properties:
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"
          description: |
            records contains a list of attendance records to update on the
            server.

    attendanceCreateRecordRequest:
      type: object
      description: |-
        CreateRecordRequest contains the request required to create an
        Attendance Record resource on the server.
      properties:
        record:
          "$ref": "#/components/schemas/attendanceRecord"

    attendanceCreateRegisterRequest:
      type: object
      description: |
        CreateRecordRequest contains the request required to create an
        Attendance Record resource on the server.
      properties:
        register:
          "$ref": "#/components/schemas/attendanceRegister"
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"

    attendanceLearnerSummaryNzMoe:
      type: object
      description: |-
        LearnerSummaryNzMoe provides structured information about a Student's
        attendance summary for students learning under the Ministry of
        Education.
      properties:
        personId:
          type: string
          format: uuid
          description: |-
            personId is the unique identifier of the Person (Student) who this
            summary is for.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the School to which this
            summary relates.
        campusId:
          type: string
          format: uuid
          description: |-
            campusId is the unique identifier of the Campus to which this
            summary relates.
        terms:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceLearnerSummaryNzMoeTerm"
          description: |-
            terms is a list of terms for which we have attendance data for the
            Student in question.

    attendanceLearnerSummaryNzMoeResponse:
      type: object
      description: |-
        LearnerSummaryNzMoeResponse contains the New Zealand Attendance Summary
        for a student as computed by the server.
      properties:
        summary:
          "$ref": "#/components/schemas/attendanceLearnerSummaryNzMoe"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceLearnerSummaryNzMoeTerm:
      type: object
      description: |-
        LearnerSummaryNzMoeTerm provides structured information about a
        Student's attendance summary for a given school term.
      properties:
        year:
          type: integer
          format: int64
          description: year is the calendar year for which this summary applies.
        term:
          type: integer
          format: int64
          description: term is the term number for which this summary applies.
        total:
          type: integer
          format: int64
          description: |-
            total is the total number of attendance records for this student
            within the specified term.
        present:
          type: integer
          format: int64
          description: |-
            present is the number of records with a Present code for this
            student within the specified term.
        late:
          type: integer
          format: int64
          description: |-
            late is the number of records with a Late code for this student
            within the specified term.
        justified:
          type: integer
          format: int64
          description: |-
            justified is the number of records with a Justified Absence code
            for this student within the specified term.
        unjustified:
          type: integer
          format: int64
          description: |-
            unjustified is the number of records with an Unjustified Absence
            code for this student within the specified term.

    attendanceListAttendanceAnalysesResponse:
      type: object
      description: |-
        ListAttendanceAnalysesResponse contains the response returned from the
        server encapsulating a list of attendance analysis report resources.
      properties:
        analyses:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceAttendanceAnalysis"
          description: analyses contains a list of attendance analysis reports from
            the server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceListAuditsResponse:
      type: object
      description: |-
        ListAuditsResponse contains the response returned from the server
        encapsulating a list of attendance record audit log resources.
      properties:
        audits:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceAudit"
          description: |-
            audits contains a list of attendance record audit log resources from the
            server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceListNzMoeDaysResponse:
      type: object
      description: |-
        ListNzMoeDaysResponse contains the response returned from the server
        encapsulating a list of "NZ MoE Day" resources.
      properties:
        nzMoeDays:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceNzMoeDay"
          description: |
            records contains a list of "NZ MoE Day" record resources from the
            server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceListRecordsResponse:
      type: object
      description: |-
        ListRecordsResponse contains the response returned from the server
        encapsulating a list of Attendance Record resources.
      properties:
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"
          description: |
            records contains a list of attendance record resources from the
            server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceListRegistersResponse:
      type: object
      description: |-
        ListRegistersResponse contains the response returned from the server
        encapsulating a list of attendance register resources.
      properties:
        registers:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRegister"
          description: |-
            registers contains a list of attendance register resources from the
            server.
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"
          description: |-
            records contains a list of attendance record resources from the
            server, if specified to be included.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceNzMoeDay:
      type: object
      description: |-
        NzMoeDay provides a way to track NZ Ministry of Education Half-Day
        Counts, for both attendance reports/audits and unjustified absence
        alerting.
      properties:
        id:
          type: string
          format: uuid
          description: id is the attendance record's unique identifier.
        schoolId:
          type: string
          format: uuid
          description: |
            schoolId is the school the attendance record is assigned to.
        campusId:
          type: string
          format: uuid
          description: |
            campusId is the school campus the attendance record is assigned to.
        createTime:
          type: integer
          format: int64
          description: |
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        personId:
          type: string
          format: uuid
          description: |-
            personId the unique identifier of the person who this attendance
            record is for.
        dateId:
          type: string
          format: uuid
          description: dateId is the date the attendance is assigned to.
        date:
          type: string
          format: date
          description: |-
            date contains the date the attendance was recorded against as a
            string to facilitate filtering.
        present:
          type: integer
          format: int64
          description: |-
            present provides a count of "half-days attended", per the MoE
            half-day calculation.
        unjustifiablyAbsent:
          type: integer
          format: int64
          description: |-
            unjustifiablyAbsent provides a count of half-day unjustifiable
            absences, per the MoE half-day unjustified absence calculation.
            This is not actually a count of half-days.

    attendanceRecord:
      type: object
      description: |
        Record provides structured information about an attendance record.
      properties:
        id:
          type: string
          format: uuid
          description: id is the attendance record's unique identifier.
        createTime:
          type: integer
          format: int64
          description: |
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the school the attendance record is assigned to.
        campusId:
          type: string
          format: uuid
          description: |-
            campusId is the school campus the attendance record is assigned
            to.
        dateId:
          type: string
          format: uuid
          description: dateId is the date the attendance is assigned to.
        periodId:
          type: string
          format: uuid
          description: |-
            periodId is the schooling class period the attendance is assigned
            to.
        authorId:
          type: string
          format: uuid
          description: |-
            authorId is the unique identifier of the person who marked the
            attendance.
        personId:
          type: string
          format: uuid
          description: |-
            personId is the unique identifier of the person who this attendance
            record is for.
        homeroomId:
          type: string
          format: uuid
          description: |-
            homeroomId is the unique identifier of the student's current
            homeroom, for generating accurate historical reports.
            Links to a Hero group.
        date:
          type: string
          format: date
          description: |-
            date contains the date the attendance was recorded against as a string
            to facilitate filtering.
        code:
          type: string
          title: |-
            code contains the recorded attendance code.
            Note:
              The validation rules around this differ depending on educational
              jurisdictions.
            For example, in New Zealand, the Ministry of education provide the
            attendance code set: {?, P, L, M, D, S, G ... }
        notes:
          type: string
          description: |
            notes contains any information regarding the marked attendance.
        autoUpdated:
          type: boolean
          format: boolean
          description: |-
            autoUpdated marks whether this Record has been auto-updated by a
            scheduled task.
        reason:
          type: string
          description: |-
            reason contains the reason as to why the attendance code was
            changed.

            Note: this will always be empty when pulling an attendance record,
            as this field is passed through to the audit log, but is required
            when performing an update to an attendance record.

    attendanceRecordResponse:
      type: object
      description: |
        RecordResponse contains the attendance record resource stored on the
        server.
      properties:
        record:
          "$ref": "#/components/schemas/attendanceRecord"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceRegister:
      type: object
      description: |
        Register provides structured information about an attendance register.
      properties:
        id:
          type: string
          format: uuid
          description: id is the attendance register's unique identifier.
        createTime:
          type: integer
          format: int64
          description: |
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        schoolId:
          type: string
          format: uuid
          description: |
            schoolId is the school the attendance register is assigned to.
        campusId:
          type: string
          format: uuid
          description: |
            campusId is the school campus the attendance register is assigned
            to.
        dateId:
          type: string
          format: uuid
          description: dateId is the date the attendance is assigned to.
        date:
          type: string
          format: date
          title: date contains the date in ISO 8601 format (YYYY-MM-DD)
        periodId:
          type: string
          format: uuid
          description: |
            periodId is the schooling class period the attendance is assigned
            to.
        groupId:
          type: string
          format: uuid
          description: groupId is the group the register is assigned to.
        authorId:
          type: string
          format: uuid
          description: |
            authorId is the staff member who marked the attendance register.
        recordIds:
          type: array
          items:
            type: string
            format: uuid
          description: |-
            recordIds is a list of attendance record resources that this
            register islinked to.

    attendanceRegisterResponse:
      type: object
      description: |-
        RegisterResponse contains the attendance register resource stored on the
        server.
      properties:
        register:
          "$ref": "#/components/schemas/attendanceRegister"
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    attendanceUpdateRecordRequest:
      type: object
      description: |-
        UpdateRecordRequest contains the request required to update an
        Attendance Record resource on the server.
      properties:
        recordId:
          type: string
          format: uuid
          description: |-
            recordId is the unique identifier of the attendance record resource
            to update on the server.
        record:
          "$ref": "#/components/schemas/attendanceRecord"

    attendanceUpdateRegisterRequest:
      type: object
      description: |-
        UpdateRegisterRequest contains the request required to update the
        linked Attendance Register attendance record resources on the server.
      properties:
        registerId:
          type: string
          format: uuid
          description: |-
            registerId is the unique identifier of the attendance register
            resource to update on the server.
        authorId:
          type: string
          format: uuid
          description: |-
            authorId is the unique identifier of the person who is accountable
            for making these attendance edits.
        records:
          type: array
          items:
            "$ref": "#/components/schemas/attendanceRecord"
          description: |-
            records contains a list of attendance records to replace the
            resources stored on the server.

    datesBulkCreateDatesRequest:
      type: object
      description: |-
        BulkCreateDatesRequest contains the request required to create multiple
        dates in a single request.
      properties:
        dates:
          type: array
          description: dates contains a list of dates to create on the server.
          items:
            "$ref": "#/components/schemas/datesDate"

    datesCreateDateRequest:
      type: object
      description: |-
        CreateDateRequest contains the request required to create a date
        resource on the server.
      properties:
        date:
          "$ref": "#/components/schemas/datesDate"

    datesDate:
      type: object
      description: Date provides structured information about a school date.
      properties:
        id:
          type: string
          format: uuid
          description: id is the unique identifier of the school's date record.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school who created the
            date.
        date:
          type: string
          format: date
          description: date contains the date in ISO 8601 format (YYYY-MM-DD).
        status:
          "$ref": "#/components/schemas/datesSchoolStatus"
        week:
          type: integer
          format: int32
          description: |-
            week specifies the week of the term this date sits within.
        term:
          type: integer
          format: int32
          description: |-
            term specifies the term of the school year this date sits within.

    datesDateResponse:
      type: object
      description: DateResponse contains the date resource stored on the server.
      properties:
        date:
          "$ref": "#/components/schemas/datesDate"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    datesListDatesResponse:
      type: object
      description: |-
        ListDatesResponse contains the response returned from the server
        encapsulating a list of date resources.
      properties:
        dates:
          type: array
          description: dates contains a list of date resources from the server.
          items:
            "$ref": "#/components/schemas/datesDate"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    datesListTermsResponse:
      type: object
      description: |-
        ListTermsResponse contains the response returned from the server
        encapsulating a list of terms as calculated from school dates.
      properties:
        terms:
          type: array
          description: terms contains a list of calculated terms from the server.
          items:
            "$ref": "#/components/schemas/datesTerm"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    datesSchoolStatus:
      type: integer
      description: |-
        SchoolStatus provides enums for the open status of the school.

         - SchoolStatus_UNSPECIFIED (0) is null, and therefore illegal.
         - SchoolStatus_OPEN (1) marks the school as open.
         - SchoolStatus_CLOSED (2) marks the school as closed.
         - SchoolStatus_MORNING (3) marks the school as open for the morning.
         - SchoolStatus_AFTERNOON (4) marks the school as open for the afternoon.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4

    datesTerm:
      type: object
      description: Term provides structured information about a calculated term.
      properties:
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school this term was
            calculated for.
        year:
          type: integer
          description: year is the year this term is within.
        term:
          type: integer
          format: int32
          description: |-
            term is the term's ordering within a school year, for example,
            Term 2.
        start:
          type: string
          format: date
          description: |-
            start is the date the term starts in ISO 8601 format (YYYY-MM-DD).
        end:
          type: string
          format: date
          description: |-
            end is the date the term ends in ISO 8601 format (YYYY-MM-DD).

    datesUpdateDateRequest:
      type: object
      description: |-
        UpdateDateRequest contains the request required to update a date
        resource on the server.
      properties:
        dateId:
          type: string
          format: uuid
          description: |-
            dateId is the unique identifier of the date resource to update on
            the server.
        date:
          "$ref": "#/components/schemas/datesDate"

    enrolmentsApplication:
      type: object
      description: |-
        Application contains the data recieved for a potential enrolment.
        The concrete field data is stored in `fields`, with the application schema
        being derived from the school's application schema. Once a person has been
        labelled as a pre-enrol the service is updated to reflect the event by
        updating the application status and adding the person id assuming the
        application has not been denied.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the Enrolment Application's unique identifier.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        status:
          "$ref": "#/components/schemas/enrolmentsApplicationStatus"
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"
        jurisdictionalId:
          type: string
          description: |-
            jurisdictionalId is the unique learner identifier for the
            educational jurisdiction.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId filters Enrolment Applications based on the school's tenant
            ID.
            For example, "61f78993-90a9-4392-92dd-83a4368528b8".
        campusId:
          type: string
          format: uuid
          description: |-
            campusId filters Enrolment Applications based on the school's campus
            ID.
        countryCode:
          type: string
          description: |-
            countryCode is a ISO Alpha 2 country code as to which country the
            school resides.
        schoolCode:
          type: string
          description: |-
            schoolCode is a school identifier as given by a state based
            educational body.
        campusCode:
          type: string
          description: |-
            campusCode is the short code assigned for the campus.
            For example, 'PRI'.
        enrolmentYear:
          type: integer
          format: int32
          description: |-
            enrolmentYear is the year in which the application was handed
            in for.
        authorId:
          type: string
          format: uuid
          description: |-
            authorId contains the id of the person who authored the received
            enrolment application.
        personId:
          type: string
          format: uuid
          description: |-
            personId is the linked Hero person account, once the student has
            been enroled.
        notes:
          type: string
          description: |-
            notes contains private notes about the enrolment process for the
            given application.
        fields:
          type: object
          description: dynamic field data
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"
        contacts:
          type: array
          description: |-
            Contact contains a list of information about people who are linked to
            the person for in case of emergency.
          items:
            "$ref": "#/components/schemas/enrolmentsContact"

    enrolmentsApplicationStatus:
      type: integer
      description: |-
        ApplicationStatus declares the state an Application to Enrol is currently
        in.

         - ApplicationStatus_UNSPECIFIED (0) is null, and therefore illegal when
           creating a resource.
         - ApplicationStatus_UNPROCESSED (1) specifies the Application to Enrol
           is unprocessed.
         - ApplicationStatus_DECLINED (2) specifies the Application to Enrol has
           been declined.
         - ApplicationStatus_ACCEPTED (3) specifies the Application to Enrol has
           been accepted.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3

    enrolmentsContact:
      type: object
      description: |-
        Contact contains information about a contact that is linked to the
        person.
      properties:
        caregiverId:
          type: string
          format: uuid
          description: caregiverId is the link to a person record within Hero.
        type:
          "$ref": "#/components/schemas/enrolmentsContactType"
        relationship:
          "$ref": "#/components/schemas/RelationshipType"
        notes:
          type: string
          description: Notes regarding the contact.
        receivesSms:
          type: boolean
          format: boolean
          description: |-
            receivesSms specifies whether the contact wishes to receive text (SMS)
            notifications for this Learner.
        billPayer:
          type: boolean
          format: boolean
          description: billPayer specifies whether the contact pays bills for this Learner.
        fields:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"

    enrolmentsContactType:
      type: integer
      description: |-
        ContactType provides enums for the various responsibilities the contact
        holds with respect to the learner.

        - ContactType_UNSPECIFIED (0) is null, and therefore illegal when
          creating or updating a resource.
        - ContactType_PRIMARY (1) marks the contact as the first tier of people
          to get in contact with, in relation to the learner.
        - ContactType_SECONDARY (2)marks the contact as the second tier of
          people to get in contact with, in relation to the learner.
        - ContactType_TERTIARY (3) marks the contact as the third tier of people
          to get in contact with, in relation to the learner.
        - ContactType_EMERGENCY (4) marks the contact as being one of the people
          to contact, in relation to the learner, in the event of an emergency.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4

    enrolmentsListApplicationsResponse:
      type: object
      description: |-
        ListApplicationsRequest Lists Enrolment Applications from the server, or
        informs the client of the error.
      properties:
        applications:
          type: array
          items:
            "$ref": "#/components/schemas/enrolmentsApplication"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    enrolmentsCreateApplicationRequest:
      type: object
      description: |
        CreateApplicationRequest creates an Enrolment Application on the server.
      properties:
        application:
          "$ref": "#/components/schemas/enrolmentsApplication"

    enrolmentsApplicationResponse:
      type: object
      description: |
        ApplicationResponse returns the Application Resource stored on the
        server.
      properties:
        application:
          "$ref": "#/components/schemas/enrolmentsApplication"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    enrolmentsListSchemasResponse:
      type: object
      description: |
        ListSchemasResponse lists Enrolment Schema resources, or informs the
        client of an error.
      properties:
        schemas:
          type: array
          items:
            "$ref": "#/components/schemas/enrolmentsSchema"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    enrolmentsCreateSchemaRequest:
      type: object
      description: CreateSchemaRequest creates an Enrolment Schema on the server.
      properties:
        schema:
          "$ref": "#/components/schemas/enrolmentsSchema"

    enrolmentsUpdateSchemaRequest:
      type: object
      description: UpdateSchemaRequest updates an Enrolment Schema on the server.
      properties:
        schemaId:
          type: string
          format: uuid
          description: |
            schemaId is the unique identifier of the Enrolment Schema resource
            on the server.
        schema:
          "$ref": "#/components/schemas/enrolmentsSchema"

    enrolmentsSchemaResponse:
      type: object
      description: |
        SchemaResponse returns the Enrolment Schema Resource stored on the
        server.
      properties:
        schema:
          "$ref": "#/components/schemas/enrolmentsSchema"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    enrolmentsSchema:
      type: object
      description: |-
        Schema contains the Enrolment Schema for a school, that is, all the fields,
        extra descriptions, introduction information, country codes, school id and
        more!
      properties:
        id:
          type: string
          format: uuid
          description: id is the unique identifier of the school's enrolment schema
        createTime:
          type: integer
          format: int64
          description: createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds from
            the epoch.
        countryCode:
          type: string
          maxLength: 2
          description: |-
            countryCode is the ISO 'Alpha 2' code for the country the school resides
            within.
        schoolId:
          type: string
          format: uuid
          description: schoolId is the unique identifier of the school obtaining
        schoolCode:
          type: string
          description: schoolCode is the code issued by an educational authority.
        schoolName:
          type: string
          description: schoolName is the name of the School.
        campusId:
          type: string
          format: uuid
          description: campusId is the unique identitfier of the School's Campus.
        campusCode:
          type: string
          description: |
            campusCode is the short code assigned for the campus. For example,
            'PRI'.
        campusName:
          type: string
          description: |
            campusName is the name of the Schools Campus for which they are doing
            enrolments for.
        enrolmentYear:
          type: integer
          format: int32
          description: |
            enrolmentYear is the year for which the enrolment intake is for.
        enrolmentsOpen:
          type: boolean
          format: boolean
          description: |
            enrolmentsOpen provides a switch for schools that prefer to be
            reactive.
        dateEnrolmentsOpens:
          type: string
          format: date
          description: |
            dateEnrolmentsOpen contains an ISO 8601 format (YYYY-MM-DD) date
            string as to when enrolments will open.
        dateEnrolmentsClose:
          type: string
          format: date
          description: |
            dateEnrolmentsClose contains an ISO 8601 format (YYYY-MM-DD) date
            string as to when enrolments will close.
        introduction:
          type: string
          description: |
            introduction provides an overall welcome to the school's enrolment
            page.
        sections:
          type: array
          items:
            "$ref": "#/components/schemas/enrolmentsSection"
        primaryContacts:
          "$ref": "#/components/schemas/enrolmentsSection"
        emergencyContacts:
          "$ref": "#/components/schemas/enrolmentsSection"
        schoolLogoUrl:
          type: string
          description: schoolLogoUrl stores the hyperlink to the school logo.
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"

    enrolmentsSection:
      type: object
      description: |-
        Section represents a page or section within an application form.
      properties:
        index:
          type: integer
          format: int32
          description: |-
            index is the order in which the section should be sorted/displayed.
        title:
          type: string
          description: |-
            title is the the name given to the section, for example,
            'Basic Details'
        description:
          type: string
          description: |-
            description provides a place for schools to explain why they need
            the following sections information.
        fields:
          type: array
          description: fields contains all the form inputs for a given section.
          items:
            "$ref": "#/components/schemas/enrolmentsField"
        count:
          type: integer
          format: int32
          description: |-
            count is used by contact sections to define how many contacts
            of that type to support.
        includeBillPayer:
          type: boolean
          format: boolean
          description: |-
            includeBillPayer is used by contact sections to determine whether
            to show the bill payer flag.

    enrolmentsField:
      type: object
      description: |-
        Field contains the metadata about a Field, which forms part of a Schema.
      properties:
        fieldId:
          type: string
          format: uuid
          description: fieldId is the unique dynamic field identifier.
        index:
          type: integer
          format: int32
          description: index is the relative field position when presented to the user.
        isSiblingLinked:
          type: boolean
          format: boolean
          description: |-
            isSiblingLinked, if enabled, updates the field data across known
            siblings.
        key:
          type: string
          description: key is the unique identifier of the field for the backend.
        inputType:
          "$ref": "#/components/schemas/InputType"
        dataType:
          "$ref": "#/components/schemas/DataType"
        label:
          type: string
          description: |-
            label is the name of the field that is displayed to the end user.
            For example, 'Address 1'
        default:
          "$ref": "#/components/schemas/FieldValue"
        placeholder:
          type: string
          description: |-
            placeholder is the text to show in the input element as an
            example to the user.
        options:
          type: array
          description: |-
            options provides a way to hold valid options for checkboxes,
            radio and select dropdowns.
          items:
            "$ref": "#/components/schemas/FieldOption"
        htmlAttributes:
          type: object
          description: |-
            htmlAttributes provides a way to dynamically inject HTML
            attributes on an HTML element.
          additionalProperties:
            type: string
        isRequired:
          type: boolean
          format: boolean
          description: isRequired, if enabled, marks the field as mandatory/required.
        optionsFromEnum:
          type: boolean
          format: boolean
          description: |-
            optionsFromEnum flags the field as using a front-end enum for the list
            of potential options.
        staticContent:
          type: string
          description: |-
            staticContent enables this field option to contain static content, for
            example, a description or title relating to the following fields in a
            list.

    groupsCreateGroupRequest:
      type: object
      description: CreateGroupRequest Creates a group resource on the server
      properties:
        group:
          "$ref": "#/components/schemas/groupsGroup"

    groupsGroupType:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      default: 0
      description: |-
        GroupType provides enumerated values that specify the type of group,
        which allows a client to display the type however they please.

        - GROUPTYPE_UNSPECIFIED (0) means the group type has not been set, and as
          such should be an illegal group.
        - GROUPTYPE_HOMEROOM (1) is used to form a group of students who are
          looked after by one or more Teachers
        - GROUPTYPE_COURSE (2) is a super set containing all students in a class.
          For example, "YR11 English"
        - GROUPTYPE_CLASS (3) is a specific instance of a Course.
        - GROUPTYPE_GROUP (4) is used for creating custom groups e.g. 'My Groups'.
        - GROUPTYPE_SHARED (5) is used for creating custom groups which are
          shared across the school e.g. 'Shared Groups'.
        - GROUPTYPE_AUTO (6) is an autogroup - it is live and living as events in
          the system happen, the group updates itself based on its criteria.

    groupsAutoGroupType:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
      default: 0
      description: |-
        - AUTOGROUPTYPE_UNSPECIFIED (0) means the auto group type has not been
          set, and as such should be an illegal auto group.
        - AUTOGROUPTYPE_TEAM (1) specifies that the auto group calculation will
          be calculated based on groups that match a given team.
        - AUTOGROUPTYPE_JURISDICTIONAL (2) specifies that the auto group
          calculation will be calculated based on jurisdictional requirements.
        - AUTOGROUPTYPE_ATTENDANCE (3) specifies that the auto group calculation
          will be calculated based on attendance criteria.
        - AUTOGROUPTYPE_FIELD (4) specifies that the auto group calculation will
          be calculated based on the value within the specified Person's dynamic
          field.
        - AUTOGROUPTYPE_PAGE (5) specifies that the auto group membership will
          be based on posts that have been created within a page.
        - AUTOGROUPTYPE_CALCULATED (6) specifies that the auto group calculation
          will be calculated based on the provided parameters.
        - AUTOGROUPTYPE_CUSTOM (7) specifies that the auto group calculation
          will be calculated based on a custom filter.
        - AUTOGROUPTYPE_FIELD_VALUES (8) specifies that the auto group
          calculation will be calculated based on a Person's dynamic field value
          matching one of the specified values found in the list.

    groupsGroup:
      type: object
      description: |-
        Group provides a model of classes, groups, auto-groups and custom
        groups for School users to read, create, update and delete.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the unique group identifier.
        createTime:
          type: integer
          format: int64
          description: |
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds from
            the epoch.
        schoolId:
          type: string
          format: uuid
          description: schoolId is the school the group is assigned to.
        campusId:
          type: string
          format: uuid
          description: campusId is the school campus the group is assigned to.
        key:
          type: string
          description: |
            key is an optional migration identifier, for mapping between v3
            and v4.
        templateId:
          type: string
          format: uuid
          description: |-
            templateId is the unique identifier of the assessment template this
            resource has been generated from.
        profileMediaId:
          type: string
          format: uuid
          description: |-
            profileMediaId is the ID of a Media Service record for the Group's
            profile image, if one has been set.
        heroId:
          type: string
          format: uint64
          description: |-
            heroId is the unique identifier across the system for systems that
            require an integer.
        type:
          "$ref": "#/components/schemas/groupsGroupType"
        autoGroupType:
          "$ref": "#/components/schemas/groupsAutoGroupType"
        name:
          type: string
          description: |-
            name is the group name.
            This provides the long or full name, or more descriptive name of
            the group.
        label:
          type: string
          description: |
            label provides a smaller, better for mobile display label of the
            group, if edited by a School Admin.
        year:
          type: integer
          format: int32
          description: |
            year specifies the calendar year to which this Group relates.
        grouping:
          type: string
          description: |
            grouping is a heading under which a set of groups are categorised
        team:
          type: string
          description: |
            team is a department or other grouping of homerooms
        staff:
          type: array
          items:
            "$ref": "#/components/schemas/groupsMember"
        caregivers:
          type: array
          items:
            "$ref": "#/components/schemas/groupsMember"
        learners:
          type: array
          items:
            "$ref": "#/components/schemas/groupsMember"
        params:
          "$ref": "#/components/schemas/groupsParams"
        filter:
          type: string
          description: |-
            filter provides a custom query string to manage membership in a
            custom auto group.

    groupsGroupResponse:
      type: object
      description: |
        GroupResponse returns a group resource, or informs the client of the
        error
      properties:
        group:
          "$ref": "#/components/schemas/groupsGroup"
        people:
          type: array
          description: |-
            people contains stub records for any Learners whose homeroom was
            updated as a result of processing this request.
          items:
            "$ref": "#/components/schemas/groupsPersonStub"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    groupsLearnerStub:
      type: object
      description: LearnerStub contains a learners homeroom id.
      properties:
        homeroomId:
          type: string
          format: uuid

    groupsListGroupsResponse:
      type: object
      description: |
        ListGroupsResponse Lists group resources, or informs the client of the
        error
      properties:
        groups:
          type: array
          description: groups contains a list of Group.
          items:
            "$ref": "#/components/schemas/groupsGroup"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    groupsMember:
      type: object
      properties:
        personId:
          type: string
          format: uuid
          description: |-
            personId is the unique id of the person who holds a membership
            status within a group.
        status:
          "$ref": "#/components/schemas/groupsMemberStatus"

    groupsMemberStatus:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      default: 0
      description: |-
        MemberStatus provides types of membership status for a given group.

        - MEMBERSTATUS_UNSPECIFIED (0) should never be set, but is set for
          validation and failsafe reasons.
        - MEMBERSTATUS_CURRENT (1) means the user is a current member of the
          group.
        - MEMBERSTATUS_FORMER (2) means the user was a member of the group, but
          is no longer.
        - MEMBERSTATUS_FUTURE (3) means the user is a member of the group, but
          at some point in the future. This can be used, for example, for
          pre-enrols moving into being normal students, which will happen on a
          given date via a task run by the events service.
        - MEMBERSTATUS_REQUESTED (4) indicates a person that has requested to
          join a group, but has not yet been approved
        - MEMBERSTATUS_REJECTED (5) indicates a person that has requested to
          join a group, but was not has not yet been approved

    groupsParams:
      type: object
      properties:
        team:
          type: string
          description: |-
            team provides a parameter in order to calculate autogroup
            membership based on the specified team, more commonly known as a
            'school house'.
        threshold:
          type: string
          description: |-
            threshold provides a parameter in order to calculate autogroup
            membership based on the specified threshold.
        jurisdiction:
          type: string
          description: |-
            jurisdiction provides a parameter in order to calculate autogroup
            membership based on the specified jurisdiction.
        rangeStart:
          type: string
          format: date
          description: |-
            rangeStart provides a parameter in order to calculate autogroup
            membership based on being after the specified starting date.
        rangeEnd:
          type: string
          format: date
          description: |-
            rangeEnd provides a parameter in order to calculate autogroup
            membership based on being before the specified ending date.
        type:
          type: string
          description: |-
            type provides a parameter in order to calculate autogroup
            membership based on the specified custom type of calculation to be
            performed.
        field:
          type: string
          description: |-
            field provides a parameter in order to calculate autogroup
            membership based on the specified field key.
        value:
          type: string
          description: |-
            value provides a parameter in order to calculate autogroup
            membership based on the specified value.
        values:
          type: array
          description: |-
            values provides a parameter in order to calculate autogroup
            membership based on a range of specified values.
          items:
            type: string

    groupsPersonStub:
      type: object
      description: |-
        PersonStub is a minimal Person record, used to notify the client of any
        homeroom updates for Learners which resulted from the requested group
        update or membership update.
      properties:
        id:
          type: string
          format: uuid
        learner:
          "$ref": "#/components/schemas/groupsLearnerStub"

    groupsUpdateGroupRequest:
      type: object
      description: UpdateGroupRequest Updates a group resource on the server
      properties:
        groupId:
          type: string
          format: uuid
          description: The specific Group to Update.
        group:
          "$ref": "#/components/schemas/groupsGroup"

    peopleAccessRequest:
      type: object
      description: |-
        AccessRequest is the resource stored that contains information about whether
        an third party is allowed access to a learner's record.
      properties:
        id:
          type: string
          format: uuid
          description: id is the Access Request's unique identifier.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        processedTime:
          type: integer
          format: int64
          description: |-
            processedTime is the last time the request was actioned by the caregiver
            in seconds from the epoch.
        schoolId:
          type: string
          format: uuid
          description: schoolId is the ID of the school requesting access.
        requesterId:
          type: string
          format: uuid
          description: |-
            requesterId is the Person ID of the staff member who created this
            request.
        caregiverId:
          type: string
          format: uuid
          description: |-
            caregiverId is the Person ID of the caregiver whose details the school
            is requesting access to.
        learnerId:
          type: string
          format: uuid
          description: |-
            learnerId is the Person ID of the child to whom the caregiver will be
            attached if the request is approved.
        learnerName:
          type: string
          description: |-
            learnerName is the child's (legal) first name, so that it can be shown
            to the caregiver.
        notes:
          type: string
          description: |-
            notes can be provided by the school as part of the request, and will be
            shown to the caregiver.

    peopleAccessRequestResponse:
      type: object
      description: |
        AccessRequestResponse contains the response returned from the server
        encapsulating the Access Request resource.
      properties:
        request:
          "$ref": "#/components/schemas/peopleAccessRequest"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleAudit:
      type: object
      description: |-
        Audit provides the model for auditing field level changes over time on
        person update.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the unique identifier of the school's Enrolment record.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        date:
          type: string
          format: date
          description: |-
            date provides a searchable date as to when the update was performed.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school who performed the
            change.
        authorId:
          type: string
          format: uuid
          description: authorId is the person who performed the edit.
        personId:
          type: string
          format: uuid
          description: |-
            personId provides a way to link the Enrolment to a Hero person.
        enrolmentId:
          type: string
          format: uuid
          description: |-
            applicationId provides a way to match the Enrolment to an enrolment
            application.
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"
        oldMoeFte:
          type: number
          format: float
          description: oldMoeFte provides the old state of FTE, or blank.
        newMoeFte:
          type: number
          format: float
          description: newMoeFte provides the new state of FTE, or blank.
        oldMoeType:
          type: string
          description: |-
            oldMoeType provides the old state of MoE student type, or blank.
        newMoeType:
          type: string
          description: |-
            newMoeType provides the new state of MoE student type, or blank.
        reason:
          type: string
          description: |-
            reason provides the reason as to why the change was made.

    peopleBulkUpdateHomeroomRequest:
      type: object
      description: |-
        BulkUpdateHomeroomRequest contains the request required to update a
        number of homeroom members on the server.
      properties:
        schoolId:
          type: string
          format: uuid
          description: schoolId specifies the school to perform the update on.
        groupId:
          type: string
          format: uuid
          description: groupId specifies the group to perform the update on.
        members:
          type: array
          items:
            type: string
            format: uuid
          description: members specifies the members to perform the update on.

    peopleBulkUpdateHomeroomResponse:
      type: object
      description: |-
        BulkUpdateHomeroomResponse contains the response returned from the
        server encapsulating the updated People resources.
      properties:
        updated:
          type: array
          items:
            "$ref": "#/components/schemas/peoplePerson"
          description: |-
            updated contains a list of updated people resources from the server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleCaregiver:
      type: object
      description: Caregiver provides structured information about a caregiver.
      properties:
        schools:
          type: array
          items:
            type: string
            format: uuid
          description: |-
            schoolId is the unique identifier of the schools the caregiver has
            access to.
        learnerIds:
          type: array
          items:
            type: string
            format: uuid
          description: |-
            learnerIds contains the learners that the Caregiver has been associated
            with as a contact. note: This in no way means they have been allowed
            access to the learner's data.
        contactHash:
          type: string
          description: |-
            contactHash is an MD5 hash of the caregiver's name and phone numbers
            and is used to help reduce data duplication by associating existing
            caregivers with additional learners rather than adding extra copies
            of them because they don't have an email address (which is used as
            the unique identifier for a caregiver).

    peopleCaregiverSearchResult:
      type: object
      description: |-
        CaregiverSearchResult is a partial Person record returned as part of a
        Caregiver search.
      properties:
        personId:
          type: string
          format: uuid
          description: personId is the Caregiver's unique identifier.
        name:
          type: string
          description: name contains the caregiver's name.
        emailAddress:
          type: string
          format: email
          description: emailAddress contains the caregiver's email address.
        inThisSchool:
          type: boolean
          format: boolean
          description: |-
            inThisSchool reflects whether this result is for a Caregiver who is
            associated with the searcher's school.

    peopleContact:
      type: object
      description: |-
        Contact contains information about a contact that is linked to the
        person.
      properties:
        caregiverId:
          type: string
          format: uuid
          description: caregiverId is the link to a person record within Hero.
        type:
          "$ref": "#/components/schemas/peopleContactType"
        priority:
          type: number
          format: uint32
          description: |-
            priority determines the order in which contacts are displayed.
        relationship:
          "$ref": "#/components/schemas/RelationshipType"
        notes:
          type: string
          description: Notes regarding the contact.
        allowedAccess:
          type: boolean
          format: boolean
          description: |-
            allowedAccess specifies whether the caregiver has access to the
            learner's record.
        contactAccessPending:
          type: boolean
          format: boolean
          description: |-
            contactAccessPending specifies whether there is a pending Access
            Request for this caregiver from the Learner's school.
        pendingContactName:
          type: string
          description: |-
            pendingContactName contains the name of the contact until they have
            approved or rejected the contact request.
        pendingContactEmail:
          type: string
          format: email
          description: |-
            pendingContactEmail contains the email address of the contact until
            they have approved or rejected the contact request.
        pendingContactRequestId:
          type: string
          format: uuid
          description: |-
            pendingContactName contains the request identifier of the contact
            until they have approved or rejected the contact request.
        receivesSms:
          type: boolean
          format: boolean
          description: |-
            receivesSms specifies whether the contact receives text (SMS)
            notifications for this Learner.
        billPayer:
          type: boolean
          format: boolean
          description: |-
            billPayer specifies whether the contact pays bills for this Learner.
        fields:
          type: object
          description: |-
            dynamic fields to do with the relationship (rather than the
            caregiver)
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"

    peopleContactType:
      type: integer
      description: |-
        ContactType provides enums for the various types of contact a person can
        have.

         - ContactType_UNSPECIFIED (0) is the null value, and therefore illegal.
         - ContactType_PRIMARY (1) specifies a primary contact.
           Generally mother or father.
         - ContactType_SECONDARY (2) specifies a secondary contact.
           Generally grandparents.
         - ContactType_TERTIARY (3) specifies a tertiary contact.
         - ContactType_EMERGENCY (4) specifies an emergency contact.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4

    peopleCreateAccessRequestRequest:
      type: object
      description: |-
        CreateAccessRequestRequest contains the request required to create an
        Access Request resource on the server.
      properties:
        request:
          "$ref": "#/components/schemas/peopleAccessRequest"

    peopleCreateEnrolmentRequest:
      type: object
      description: |-
        CreateEnrolmentRequest contains the request required to create an
        Enrolment resource on the server.
      properties:
        enrolment:
          "$ref": "#/components/schemas/peopleEnrolment"

    peopleCreatePersonRequest:
      type: object
      description: |-
        CreatePersonRequest contains the request required to create a Person
        resource on the server.
      properties:
        person:
          "$ref": "#/components/schemas/peoplePerson"

    peopleEnrolment:
      type: object
      description: |-
        Enrolment is the resource stored that contains an enrolment record for a
        learner, it may also contain related jurisdictional data.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the unique identifier of the school's Enrolment record.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        personId:
          type: string
          format: uuid
          description: |-
            personId provides a way to link the Enrolment to a Hero person.
        applicationId:
          type: string
          format: uuid
          description: |-
            applicationId provides a way to match the Enrolment to an enrolment
            application.
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"
        jurisdictionalId:
          type: string
          description: |-
            jurisdictionalId is the unique learner identifier for the
            educational jurisdiction.
        jurisdictionalStatus:
          "$ref": "#/components/schemas/peopleJurisdictionalStatus"
        status:
          "$ref": "#/components/schemas/peopleEnrolmentStatus"
        meta:
          "$ref": "#/components/schemas/peopleEnrolmentMeta"
        fte:
          type: number
          format: float
          description: fte is the Full Time Equivalent the Learner is taking.
        entryDate:
          type: string
          format: date
          description: |-
            entryDate is when the Learner started this school in ISO 8601
            format (YYYY-MM-DD).
        exitDate:
          type: string
          format: date
          description: |-
            exitDate is when the Learner left this school in ISO 8601 format
            (YYYY-MM-DD).
        departureReason:
          type: string
          description: |-
            departureReason is the reason the Learner left this school.
        fields:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"
          description: |-
            fields holds this Learner's dynamic field values for enrolments.
        learner:
          "$ref": "#/components/schemas/peopleLearner"
        postCounts:
          type: array
          items:
            "$ref": "#/components/schemas/peoplePostCount"
          description: |-
            Summary of posts about this Person from a specific school.

    peopleEnrolmentMeta:
      type: object
      description: |-
        EnrolmentMeta contains extra information that Hero can inject mainly
        based on jurisdictional differences.
      properties:
        fields:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"
          description: fields contains dynamic meta fields.

    peopleEnrolmentResponse:
      type: object
      description: EnrolmentResponse contains the Enrolment resource stored on the server.
      properties:
        enrolment:
          "$ref": "#/components/schemas/peopleEnrolment"
        person:
          "$ref": "#/components/schemas/peoplePerson"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleEnrolmentStatus:
      type: integer
      description: |-
        EnrolmentStatus provides enums for the various states an enrolment can have.

         - EnrolmentStatus_UNSPECIFIED (0) is null, and therefore illegal.
         - EnrolmentStatus_PRE_ENROLLED (1) marks the learner as being a currently
        pre-enrolled student.
         - EnrolmentStatus_CURRENT (2) marks the learner as being a currently
        enrolled student.
         - EnrolmentStatus_FORMER (3) marks the learner as being a former, or
        unenrolled student.
         - EnrolmentStatus_PENDING (4) marks the learner as being currently
        enrolled, but with an existing current enrolment elsewhere.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4

    peopleEnrolmentStub:
      type: object
      description: |-
        EnrolmentStub contains metadata about a learner's enrolment history.
      properties:
        enrolmentId:
          type: string
          format: uuid
          description: |-
            enrolmentId is the unique identifier of the linked Enrolment
            resource.
        schoolId:
          type: string
          format: uuid
          description: schoolId is the unique identifier of the school.
        status:
          "$ref": "#/components/schemas/peopleEnrolmentStatus"

    peopleJurisdictionalStatus:
      type: integer
      description: |-
        JurisdictionalStatus provides ENUMs to track the status of a linked
        jurisdictional enrolment.

         - JurisdictionalStatus_UNSPECIFIED (0) is the null value, and as such
           is invalid.
         - JurisdictionalStatus_PENDING_ENROLMENT (1) specifies the enrolment
           requires being pushed up to a jurisdictional authority.
         - JurisdictionalStatus_ENROLLED (2) specifies the current enrolment has
           been enrolled via a jurisdictional authority.
         - JurisdictionalStatus_PENDING_UNENROLMENT (3) specifies the current
           enrolment requires being unenrolled by a jurisdictional authority.
         - JurisdictionalStatus_UNENROLLED (4) specifies the current enrolment has
           been unenrolled via a jurisdictional authority.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4

    peopleLearner:
      type: object
      description: |-
        Learner contains the data structure for a person of type Learner within
        Hero.
      properties:
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school the Learner is
            currently attending.
        schoolCampusId:
          type: string
          format: uuid
          description: |-
            schoolCampusId is the current campus that the Learner is assigned.
            For example, 'Primary School'.
        homeroomId:
          type: string
          format: uuid
          description: |-
            homeroomId is the class the Learner is assigned as their home room.
            Will be a foreign key of a Hero Group.
        enrolmentId:
          type: string
          format: uuid
          description: |-
            enrolmentId is the current or most recent educational facility the
            Learner has been assigned.
        siblingPosition:
          type: number
          format: uint32
          description: |-
            siblingPosition contains the position in the family this child holds
            with respect to the current school they are enrolled in.
            One-based index, you can't be the 0th position in a family.
        siblingCount:
          type: number
          format: uint32
          description: |-
            siblingCount contains the number of known siblings the learner has
            within their family including self, with respect to the current school
            they are enrolled in.
            One-based index, you can't be the 0th child in a family.
        siblings:
          type: array
          items:
            "$ref": "#/components/schemas/peopleLearnerSibling"
          description: siblings contains an array about the learner's siblings.
        contacts:
          type: array
          items:
            "$ref": "#/components/schemas/peopleContact"
          description: contacts is a list of people who give care to the learner.
        enrolments:
          type: array
          items:
            "$ref": "#/components/schemas/peopleEnrolmentStub"
          description: |-
            enrolments contains meta information about the learner's enrolment
            history.
        flags:
          type: array
          items:
            "$ref": "#/components/schemas/peopleLearnerFlag"
          description: |-
            flags is a list of flags which have been applied to this Learner by
            their School.

    peopleLearnerSibling:
      type: object
      properties:
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId contains the Hero school the sibling is currently enroled
            at.
        personId:
          type: string
          format: uuid
          description: |-
            personId contains the unique person identifier to the sibling
            record.

    peopleLearnerFlag:
      type: integer
      description: |-
        LearnerFlag provides a list of possible learner flags. These simply provide
        special markers where schools can arbitrarily decide what each flag means.

         - LearnerFlag_UNSPECIFIED (0) is null, and therefore illegal.
         - LearnerFlag_RED (1) specifies the red flag has been set.
         - LearnerFlag_BLUE (2) specifies the blue flag has been set.
         - LearnerFlag_GREEN (3) specifies the green flag has been set.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3

    peopleLearnerSearchResult:
      type: object
      description: |-
        LearnerSearchResult is a partial Person record returned as part of a
        Learner search.
      properties:
        personId:
          type: string
          format: uuid
          description: personId is the Learner's unique identifier.
        legalName:
          type: string
          description: legalName contains the learner's legal name.
        preferredName:
          type: string
          description: preferredName contains the learner's preferred name.
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"
        jurisdictionalId:
          type: string
          description: |-
            jurisdictionalId is the unique learner identifier for the
            educational jurisdiction.
        inThisSchool:
          type: boolean
          format: boolean
          description: |-
            inThisSchool reflects whether this result is for a Learner who is
            currently enrolled at the searcher's school.
        isFormer:
          type: boolean
          format: boolean
          description: |-
            isFormer reflects whether this result is for a Learner who was
            previously enrolled at the searcher's school.

    peopleListAccessRequestsResponse:
      type: object
      description: |-
        ListAccessRequestsResponse contains the response returned from the
        server encapsulating a list of Access Request resources.
      properties:
        requests:
          type: array
          description: |-
            requests contains a list of access request resources from the
            server.
          items:
            "$ref": "#/components/schemas/peopleAccessRequest"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleListAuditsResponse:
      type: object
      description: |-
        ListAuditsResponse returns a list of audit resources, or informs the
        client of the error.
      properties:
        audits:
          type: array
          items:
            "$ref": "#/components/schemas/peopleAudit"
          description: audits contains a list of audits.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleListEnrolmentsResponse:
      type: object
      description: |-
        ListEnrolmentsResponse returns a list of enrolment resources and people
        if included, or informs the client of the error.
      properties:
        enrolments:
          type: array
          items:
            "$ref": "#/components/schemas/peopleEnrolment"
          description: |-
            enrolments contains a list of enrolment resources from the server.
        people:
          type: array
          items:
            "$ref": "#/components/schemas/peoplePerson"
          description: |-
            people contains the included resources if requested via the include
            query param.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleListPeopleResponse:
      type: object
      description: |-
        ListPeopleResponse contains the response returned from the server
        encapsulating a list of People resources.
      properties:
        people:
          type: array
          items:
            "$ref": "#/components/schemas/peoplePerson"
          description: people contains a list of people.
        enrolments:
          type: array
          items:
            "$ref": "#/components/schemas/peopleEnrolment"
          description: |-
            enrolments contains the included resources if requested via the
            include query param.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peoplePerson:
      type: object
      description: |-
        Person is the resource stored that contains information pertaining to a
        single individual.
      properties:
        id:
          type: string
          format: uuid
          description: id is the Person's unique identifier.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        type:
          "$ref": "#/components/schemas/peoplePersonType"
        userId:
          type: string
          format: uuid
          description: userId is the ID of this Person's User record.
        archived:
          type: boolean
          format: boolean
          description: |-
            archived specifies whether the current tenant owner has marked the
            record as archived.
        profileMediaId:
          type: string
          format: uuid
          description: |-
            profileMediaId is the ID of a Media Service record for the Person's
            profile image.
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"
        jurisdictionalId:
          type: string
          description: |-
            jurisdictionalId is the unique learner identifier based on the
            educational jurisdiction.
        heroId:
          type: string
          format: uint64
          description: |-
            heroId is the unique identifier across the system for systems that
            require an integer.
        fields:
          type: object
          description: |-
            fields contains dynamic fields, which is where the bulk of people
            data is referenced from. The schema for a given school can be found
            via people-schema service.
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"
        postCounts:
          type: array
          description: |-
            postCounts contains a summary of post count meta information about
            this person.
          items:
            "$ref": "#/components/schemas/peoplePostCount"
        learner:
          "$ref": "#/components/schemas/peopleLearner"
        caregiver:
          "$ref": "#/components/schemas/peopleCaregiver"
        staff:
          "$ref": "#/components/schemas/peopleStaff"

    peoplePersonResponse:
      type: object
      description: |-
        PersonResponse contains the response returned from the server
        encapsulating the Person resource.
      properties:
        person:
          "$ref": "#/components/schemas/peoplePerson"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peoplePersonType:
      type: integer
      description: |-
        PersonType provides enums for the various types of person within our system.

         - PersonType_UNSPECIFIED (0) is the null value, and as such is invalid.
         - PersonType_LEARNER (1) specifies that the Person record is a learner of
           an educational facility.
         - PersonType_STAFF (2) specifies that the Person record is a staff member
           of a school.
         - PersonType_CAREGIVER (3) specifies that the Person record is a parent.
         - PersonType_LINCED (15) specifies a LINC-ED staff member or people with
           administrator rights.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 15

    peoplePostCount:
      type: object
      description: |-
        PostCount provides summary information for Posts about a Person,
        grouped by type.
      properties:
        type:
          type: string
          description: |-
            type specifies the type of summary, for example pages, goals e.t.c.
        items:
          type: array
          items:
            "$ref": "#/components/schemas/peoplePostCountItem"
          description: |-
            items contains summary counts for the items matching the type.

    peoplePostCountItem:
      type: object
      description: |-
        PostCountItem provides summary information for Posts about a Person.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id contains the identifier of the entity (page, goal, etc) in
            question.
        published:
          type: integer
          format: int32
          description: published contains the number of published posts.
        total:
          type: integer
          format: int32
          description: total contains the number of posts.
        latestPostDate:
          type: integer
          format: int64
          description: |-
            latestPostDate contains the epoch timestamp of latest post (displayDate).
        year:
          type: integer
          format: int32
          description: year specifies the year to which this count applies.

    peopleSearchCaregiversResponse:
      type: object
      description: |-
        SearchCaregiversResponse contains the response returned from the server
        encapsulating a list of Caregiver search result resources.
      properties:
        caregivers:
          type: array
          items:
            "$ref": "#/components/schemas/peopleCaregiverSearchResult"
          description: |-
            caregivers contains a list of search result resources from the
            server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleSearchLearnersResponse:
      type: object
      description: |-
        SearchLearnersResponse contains the response returned from the server
        encapsulating a list of Learner search result resources.
      properties:
        learners:
          type: array
          items:
            "$ref": "#/components/schemas/peopleLearnerSearchResult"
          description: |-
            learners contains a list of search result resources from the server.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    peopleStaff:
      type: object
      description: Staff provides structured information about a staff member.
      properties:
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school the Staff Member is
            currently attending.
        schoolCampusId:
          type: string
          format: uuid
          description: |-
            schoolCampusId is the current campus that the Staff member has been
            assigned. For example, 'Primary School'
        homeroomId:
          type: string
          format: uuid
          description: |-
            homeroomId is the class the Staff member has been assigned as their
            home room. Provides the foreign key to a Hero Group.
        contacts:
          type: array
          items:
            "$ref": "#/components/schemas/peopleContact"
          description: |-
            contacts is a list of people who may be emergency contacts for a
            staff member.

    peopleUpdateEnrolmentRequest:
      type: object
      description: |-
        UpdateEnrolmentRequest contains the request required to update an
        Enrolment resource on the server.
      properties:
        enrolmentId:
          type: string
          format: uuid
          description: |-
            enrolmentId is the unique enrolment resource to update on the
            server.
        enrolment:
          "$ref": "#/components/schemas/peopleEnrolment"

    peopleUpdatePersonRequest:
      type: object
      description: |-
        UpdatePersonRequest contains the request required to update a Person
        resource on the server.
      properties:
        personId:
          type: string
          format: uuid
          description: |-
            personId is the unique Person resource to update on the server.
        person:
          "$ref": "#/components/schemas/peoplePerson"
        reason:
          type: string
          description: |-
            reason is required for audit purposes only on certain field level
            changes.

    schoolsAddress:
      type: object
      description: |-
        Address is formatted according to the Universal Postal Union.
        Ref: http://www.upu.int/uploads/tx_sbdownloader/descriptionPostcodesGuideToTheHeadingsUsedInThisChapterEn.pdf
      properties:
        number:
          type: string
          description: |-
            The street number of the address.
            For example, '63a'
        street:
          type: string
          description: |-
            street contains the thoroughfare type, name and/or apartment of the
            Address.
            For example, 'Mandeville Street'.
        locality:
          type: string
          description: |-
            locality contains the suburb of the Address.
            For example, 'Riccaton'.
        district:
          type: string
          description: |-
            district contains the town/city/county of the Address.
            For example, 'Christchurch'.
        region:
          type: string
          description: |-
            region is the area in which the Address is located.
            For example, 'Canterbury'.
        postcode:
          type: string
          description: |-
            postcode contains the postcode of the address, and sometimes name of
            the post office.
        coordinates:
          "$ref": "#/components/schemas/schoolsAddressLocation"

    schoolsAddressLocation:
      type: object
      description: |-
        AddressLocation provides precise GPS coordinates for a given location.
      properties:
        latitude:
          type: number
          format: float
          description: |-
            latitude specifies the precise east-west (latitudinal) point of the
            address location.
        longitude:
          type: number
          format: float
          description: |-
            longitude provides the precise north-south (longitudinal) point of
            the address location.

    schoolsFeature:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      default: 0
      description: |-
        Feature contains specific features that can be enabled for a given school,
        each feature with it's own specific set of offerings.

        - Feature_UNSPECIFIED (0) is the null value, and therefore illegal.
        - Feature_HERO_PLUS (1) Hero Plus is a "premium" offering, including video
          uploads.
        - Feature_HERO_SMS (2) Hero SMS enables the full student management
          functionality, including Enrolments and Attendance.
        - Feature_PUPIL_BILLING (3) Pupil Billing enables finance (pupil billing)
          functionality.
        - Feature_PREMIER (4) Hero Premier enables "Premier" features.
        - Feature_MULTI_JURISDICTION (5) enables support for schools that enrol
          students from multiple educational jurisdictions.

    schoolsISO2CountryCode:
      type: integer
      description: |-
        ISO2CountryCode provides enums based on the 2 letter country code to support
        listing countries based on ISO standard 3166-1 alpha-2.

         - ISO2CountryCode_UNSPECIFIED (0) is null, and therefore illegal.
         - ISO2CountryCode_AD (1) Andorra.
         - ISO2CountryCode_AE (2) United Arab Emirates.
         - ISO2CountryCode_AF (3) Afghanistan.
         - ISO2CountryCode_AG (4) Antigua and Barbuda.
         - ISO2CountryCode_AI (5) Anguilla.
         - ISO2CountryCode_AL (6) Albania.
         - ISO2CountryCode_AM (7) Armenia.
         - ISO2CountryCode_AN (8) Netherlands Antilles.
         - ISO2CountryCode_AO (9) Angola.
         - ISO2CountryCode_AQ (10) Antarctica.
         - ISO2CountryCode_AR (11) Argentina.
         - ISO2CountryCode_AS (12) American Samoa.
         - ISO2CountryCode_AT (13) Austria.
         - ISO2CountryCode_AU (14) Australia.
         - ISO2CountryCode_AW (15) Aruba.
         - ISO2CountryCode_AZ (16) Azerbaijan.
         - ISO2CountryCode_BA (17) Bosnia and Herzegovina.
         - ISO2CountryCode_BB (18) Barbados.
         - ISO2CountryCode_BD (19) Bangladesh.
         - ISO2CountryCode_BE (20) Belgium.
         - ISO2CountryCode_BF (21) Burkina Faso.
         - ISO2CountryCode_BG (22) Bulgaria.
         - ISO2CountryCode_BH (23) Bahrain.
         - ISO2CountryCode_BI (24) Burundi.
         - ISO2CountryCode_BJ (25) Benin.
         - ISO2CountryCode_BL (26) Saint-Barthélemy.
         - ISO2CountryCode_BM (27) Bermuda.
         - ISO2CountryCode_BN (28) Brunei Darussalam.
         - ISO2CountryCode_BO (29) Bolivia.
         - ISO2CountryCode_BR (30) Brazil.
         - ISO2CountryCode_BS (31) Bahamas.
         - ISO2CountryCode_BT (32) Bhutan.
         - ISO2CountryCode_BV (33) Bouvet Island.
         - ISO2CountryCode_BW (34) Botswana.
         - ISO2CountryCode_BY (35) Belarus.
         - ISO2CountryCode_BZ (36) Belize.
         - ISO2CountryCode_CA (37) Canada.
         - ISO2CountryCode_CC (38) Cocos (Keeling) Islands.
         - ISO2CountryCode_CD (39) Congo, (Kinshasa).
         - ISO2CountryCode_CF (40) Central African Republic.
         - ISO2CountryCode_CG (41) Congo (Brazzaville).
         - ISO2CountryCode_CH (42) Switzerland.
         - ISO2CountryCode_CI (43) Côte d'Ivoire.
         - ISO2CountryCode_CK (44) Cook Islands.
         - ISO2CountryCode_CL (45) Chile.
         - ISO2CountryCode_CM (46) Cameroon.
         - ISO2CountryCode_CN (47) China.
         - ISO2CountryCode_CO (48) Colombia.
         - ISO2CountryCode_CR (49) Costa Rica.
         - ISO2CountryCode_CU (50) Cuba.
         - ISO2CountryCode_CV (51) Cape Verde.
         - ISO2CountryCode_CX (52) Christmas Island.
         - ISO2CountryCode_CY (53) Cyprus.
         - ISO2CountryCode_CZ (54) Czech Republic.
         - ISO2CountryCode_DE (55) Germany.
         - ISO2CountryCode_DJ (56) Djibouti.
         - ISO2CountryCode_DK (57) Denmark.
         - ISO2CountryCode_DM (58) Dominica.
         - ISO2CountryCode_DO (59) Dominican Republic.
         - ISO2CountryCode_DZ (60) Algeria.
         - ISO2CountryCode_EC (61) Ecuador.
         - ISO2CountryCode_EE (62) Estonia.
         - ISO2CountryCode_EG (63) Egypt.
         - ISO2CountryCode_EH (64) Western Sahara.
         - ISO2CountryCode_ER (65) Eritrea.
         - ISO2CountryCode_ES (66) Spain.
         - ISO2CountryCode_ET (67) Ethiopia.
         - ISO2CountryCode_FI (68) Finland.
         - ISO2CountryCode_FJ (69) Fiji.
         - ISO2CountryCode_FK (70) Falkland Islands (Malvinas).
         - ISO2CountryCode_FM (71) Micronesia, Federated States of.
         - ISO2CountryCode_FO (72) Faroe Islands.
         - ISO2CountryCode_FR (73) France.
         - ISO2CountryCode_GA (74) Gabon.
         - ISO2CountryCode_GB (75) United Kingdom.
         - ISO2CountryCode_GD (76) Grenada.
         - ISO2CountryCode_GE (77) Georgia.
         - ISO2CountryCode_GF (78) French Guiana.
         - ISO2CountryCode_GG (79) Guernsey.
         - ISO2CountryCode_GH (80) Ghana.
         - ISO2CountryCode_GI (81) Gibraltar.
         - ISO2CountryCode_GL (82) Greenland.
         - ISO2CountryCode_GM (83) Gambia.
         - ISO2CountryCode_GN (84) Guinea.
         - ISO2CountryCode_GP (85) Guadeloupe.
         - ISO2CountryCode_GQ (86) Equatorial Guinea.
         - ISO2CountryCode_GR (87) Greece.
         - ISO2CountryCode_GS (88) South Georgia and the South Sandwich Islands.
         - ISO2CountryCode_GT (89) Guatemala.
         - ISO2CountryCode_GU (90) Guam.
         - ISO2CountryCode_GW (91) Guinea-Bissau.
         - ISO2CountryCode_GY (92) Guyana.
         - ISO2CountryCode_HK (93) Hong Kong, SAR China.
         - ISO2CountryCode_HM (94) Heard and Mcdonald Islands.
         - ISO2CountryCode_HN (95) Honduras.
         - ISO2CountryCode_HR (96) Croatia.
         - ISO2CountryCode_HT (97) Haiti.
         - ISO2CountryCode_HU (98) Hungary.
         - ISO2CountryCode_ID (99) Indonesia.
         - ISO2CountryCode_IE (100) Ireland.
         - ISO2CountryCode_IL (101) Israel.
         - ISO2CountryCode_IM (102) Isle of Man.
         - ISO2CountryCode_IN (103) India.
         - ISO2CountryCode_IO (104) British Indian Ocean Territory.
         - ISO2CountryCode_IQ (105) Iraq.
         - ISO2CountryCode_IR (106) Iran, Islamic Republic of.
         - ISO2CountryCode_IS (107) Iceland.
         - ISO2CountryCode_IT (108) Italy.
         - ISO2CountryCode_JE (109) Jersey.
         - ISO2CountryCode_JM (110) Jamaica.
         - ISO2CountryCode_JO (111) Jordan.
         - ISO2CountryCode_JP (112) Japan.
         - ISO2CountryCode_KE (113) Kenya.
         - ISO2CountryCode_KG (114) Kyrgyzstan.
         - ISO2CountryCode_KH (115) Cambodia.
         - ISO2CountryCode_KI (116) Kiribati.
         - ISO2CountryCode_KM (117) Comoros.
         - ISO2CountryCode_KN (118) Saint Kitts and Nevis.
         - ISO2CountryCode_KP (119) Korea (North).
         - ISO2CountryCode_KR (120) Korea (South).
         - ISO2CountryCode_KW (121) Kuwait.
         - ISO2CountryCode_KY (122) Cayman Islands.
         - ISO2CountryCode_KZ (123) Kazakhstan.
         - ISO2CountryCode_LA (124) Lao PDR.
         - ISO2CountryCode_LB (125) Lebanon.
         - ISO2CountryCode_LC (126) Saint Lucia.
         - ISO2CountryCode_LI (127) Liechtenstein.
         - ISO2CountryCode_LK (128) Sri Lanka.
         - ISO2CountryCode_LR (129) Liberia.
         - ISO2CountryCode_LS (130) Lesotho.
         - ISO2CountryCode_LT (131) Lithuania.
         - ISO2CountryCode_LU (132) Luxembourg.
         - ISO2CountryCode_LV (133) Latvia.
         - ISO2CountryCode_LY (134) Libya.
         - ISO2CountryCode_MA (135) Morocco.
         - ISO2CountryCode_MC (136) Monaco.
         - ISO2CountryCode_MD (137) Moldova.
         - ISO2CountryCode_ME (138) Montenegro.
         - ISO2CountryCode_MF (139) Saint-Martin (French part).
         - ISO2CountryCode_MG (140) Madagascar.
         - ISO2CountryCode_MH (141) Marshall Islands.
         - ISO2CountryCode_MK (142) Macedonia, Republic of.
         - ISO2CountryCode_ML (143) Mali.
         - ISO2CountryCode_MM (144) Myanmar.
         - ISO2CountryCode_MN (145) Mongolia.
         - ISO2CountryCode_MO (146) Macao, SAR China.
         - ISO2CountryCode_MP (147) Northern Mariana Islands.
         - ISO2CountryCode_MQ (148) Martinique.
         - ISO2CountryCode_MR (149) Mauritania.
         - ISO2CountryCode_MS (150) Montserrat.
         - ISO2CountryCode_MT (151) Malta.
         - ISO2CountryCode_MU (152) Mauritius.
         - ISO2CountryCode_MV (153) Maldives.
         - ISO2CountryCode_MW (154) Malawi.
         - ISO2CountryCode_MX (155) Mexico.
         - ISO2CountryCode_MY (156) Malaysia.
         - ISO2CountryCode_MZ (157) Mozambique.
         - ISO2CountryCode_NA (158) Namibia.
         - ISO2CountryCode_NC (159) New Caledonia.
         - ISO2CountryCode_NE (160) Niger.
         - ISO2CountryCode_NF (161) Norfolk Island.
         - ISO2CountryCode_NG (162) Nigeria.
         - ISO2CountryCode_NI (163) Nicaragua.
         - ISO2CountryCode_NL (164) Netherlands.
         - ISO2CountryCode_NO (165) Norway.
         - ISO2CountryCode_NP (166) Nepal.
         - ISO2CountryCode_NR (167) Nauru.
         - ISO2CountryCode_NU (168) Niue.
         - ISO2CountryCode_NZ (169) New Zealand.
         - ISO2CountryCode_OM (170) Oman.
         - ISO2CountryCode_PA (171) Panama.
         - ISO2CountryCode_PE (172) Peru.
         - ISO2CountryCode_PF (173) French Polynesia.
         - ISO2CountryCode_PG (174) Papua New Guinea.
         - ISO2CountryCode_PH (175) Philippines.
         - ISO2CountryCode_PK (176) Pakistan.
         - ISO2CountryCode_PL (177) Poland.
         - ISO2CountryCode_PM (178) Saint Pierre and Miquelon.
         - ISO2CountryCode_PN (179) Pitcairn.
         - ISO2CountryCode_PR (180) Puerto Rico.
         - ISO2CountryCode_PS (181) Palestinian Territory.
         - ISO2CountryCode_PT (182) Portugal.
         - ISO2CountryCode_PW (183) Palau.
         - ISO2CountryCode_PY (184) Paraguay.
         - ISO2CountryCode_QA (185) Qatar.
         - ISO2CountryCode_RE (186) Réunion.
         - ISO2CountryCode_RO (187) Romania.
         - ISO2CountryCode_RS (188) Serbia.
         - ISO2CountryCode_RU (189) Russian Federation.
         - ISO2CountryCode_RW (190) Rwanda.
         - ISO2CountryCode_SA (191) Saudi Arabia.
         - ISO2CountryCode_SB (192) Solomon Islands.
         - ISO2CountryCode_SC (193) Seychelles.
         - ISO2CountryCode_SD (194) Sudan.
         - ISO2CountryCode_SE (195) Sweden.
         - ISO2CountryCode_SG (196) Singapore.
         - ISO2CountryCode_SH (197) Saint Helena.
         - ISO2CountryCode_SI (198) Slovenia.
         - ISO2CountryCode_SJ (199) Svalbard and Jan Mayen Islands.
         - ISO2CountryCode_SK (200) Slovakia.
         - ISO2CountryCode_SL (201) Sierra Leone.
         - ISO2CountryCode_SM (202) San Marino.
         - ISO2CountryCode_SN (203) Senegal.
         - ISO2CountryCode_SO (204) Somalia.
         - ISO2CountryCode_SR (205) Suriname.
         - ISO2CountryCode_SS (206) South Sudan.
         - ISO2CountryCode_ST (207) Sao Tome and Principe.
         - ISO2CountryCode_SV (208) El Salvador.
         - ISO2CountryCode_SY (209) Syrian Arab Republic (Syria).
         - ISO2CountryCode_SZ (210) Swaziland.
         - ISO2CountryCode_TC (211) Turks and Caicos Islands.
         - ISO2CountryCode_TD (212) Chad.
         - ISO2CountryCode_TF (213) French Southern Territories.
         - ISO2CountryCode_TG (214) Togo.
         - ISO2CountryCode_TH (215) Thailand.
         - ISO2CountryCode_TJ (216) Tajikistan.
         - ISO2CountryCode_TK (217) Tokelau.
         - ISO2CountryCode_TL (218) Timor-Leste.
         - ISO2CountryCode_TM (219) Turkmenistan.
         - ISO2CountryCode_TN (220) Tunisia.
         - ISO2CountryCode_TO (221) Tonga.
         - ISO2CountryCode_TR (222) Turkey.
         - ISO2CountryCode_TT (223) Trinidad and Tobago.
         - ISO2CountryCode_TV (224) Tuvalu.
         - ISO2CountryCode_TW (225) Taiwan, Republic of China.
         - ISO2CountryCode_TZ (226) Tanzania, United Republic of.
         - ISO2CountryCode_UA (227) Ukraine.
         - ISO2CountryCode_UG (228) Uganda.
         - ISO2CountryCode_UM (229) US Minor Outlying Islands.
         - ISO2CountryCode_US (230) United States of America.
         - ISO2CountryCode_UY (231) Uruguay.
         - ISO2CountryCode_UZ (232) Uzbekistan.
         - ISO2CountryCode_VA (233) Holy See (Vatican City State).
         - ISO2CountryCode_VC (234) Saint Vincent and Grenadines.
         - ISO2CountryCode_VE (235) Venezuela (Bolivarian Republic).
         - ISO2CountryCode_VG (236) British Virgin Islands.
         - ISO2CountryCode_VI (237) Virgin Islands, US.
         - ISO2CountryCode_VN (238) Viet Nam.
         - ISO2CountryCode_VU (239) Vanuatu.
         - ISO2CountryCode_WF (240) Wallis and Futuna Islands.
         - ISO2CountryCode_WS (241) Samoa.
         - ISO2CountryCode_YE (242) Yemen.
         - ISO2CountryCode_YT (243) Mayotte.
         - ISO2CountryCode_ZA (244) South Africa.
         - ISO2CountryCode_ZM (245) Zambia.
         - ISO2CountryCode_ZW (246) Zimbabwe.
      default: 0
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 19
        - 20
        - 21
        - 22
        - 23
        - 24
        - 25
        - 26
        - 27
        - 28
        - 29
        - 30
        - 31
        - 32
        - 33
        - 34
        - 35
        - 36
        - 37
        - 38
        - 39
        - 40
        - 41
        - 42
        - 43
        - 44
        - 45
        - 46
        - 47
        - 48
        - 49
        - 50
        - 51
        - 52
        - 53
        - 54
        - 55
        - 56
        - 57
        - 58
        - 59
        - 60
        - 61
        - 62
        - 63
        - 64
        - 65
        - 66
        - 67
        - 68
        - 69
        - 70
        - 71
        - 72
        - 73
        - 74
        - 75
        - 76
        - 77
        - 78
        - 79
        - 80
        - 81
        - 82
        - 83
        - 84
        - 85
        - 86
        - 87
        - 88
        - 89
        - 90
        - 91
        - 92
        - 93
        - 94
        - 95
        - 96
        - 97
        - 98
        - 99
        - 100
        - 101
        - 102
        - 103
        - 104
        - 105
        - 106
        - 107
        - 108
        - 109
        - 110
        - 111
        - 112
        - 113
        - 114
        - 115
        - 116
        - 117
        - 118
        - 119
        - 120
        - 121
        - 122
        - 123
        - 124
        - 125
        - 126
        - 127
        - 128
        - 129
        - 130
        - 131
        - 132
        - 133
        - 134
        - 135
        - 136
        - 137
        - 138
        - 139
        - 140
        - 141
        - 142
        - 143
        - 144
        - 145
        - 146
        - 147
        - 148
        - 149
        - 150
        - 151
        - 152
        - 153
        - 154
        - 155
        - 156
        - 157
        - 158
        - 159
        - 160
        - 161
        - 162
        - 163
        - 164
        - 165
        - 166
        - 167
        - 168
        - 169
        - 170
        - 171
        - 172
        - 173
        - 174
        - 175
        - 176
        - 177
        - 178
        - 179
        - 180
        - 181
        - 182
        - 183
        - 184
        - 185
        - 186
        - 187
        - 188
        - 189
        - 190
        - 191
        - 192
        - 193
        - 194
        - 195
        - 196
        - 197
        - 198
        - 199
        - 200
        - 201
        - 202
        - 203
        - 204
        - 205
        - 206
        - 207
        - 208
        - 209
        - 210
        - 211
        - 212
        - 213
        - 214
        - 215
        - 216
        - 217
        - 218
        - 219
        - 220
        - 221
        - 222
        - 223
        - 224
        - 225
        - 226
        - 227
        - 228
        - 229
        - 230
        - 231
        - 232
        - 233
        - 234
        - 235
        - 236
        - 237
        - 238
        - 239
        - 240
        - 241
        - 242
        - 243
        - 244
        - 245
        - 246

    schoolsListOptionGroupsResponse:
      type: object
      description: |-
        ListOptionGroupsResponse contains a list of option group resources from
        the server.
      properties:
        optionGroups:
          type: array
          items:
            "$ref": "#/components/schemas/schoolsOptionGroup"
          description: optionGroups contains a list of option groups.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsListOptionHeadingsResponse:
      type: object
      description: |-
        ListOptionHeadingsResponse contains a list of option heading resources
        from the server.
      properties:
        optionHeadings:
          type: array
          items:
            "$ref": "#/components/schemas/schoolsOptionHeading"
          description: optionHeadings contains a list of optionHeadings.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsListOptionsResponse:
      type: object
      description: |-
        ListOptionsResponse contains a list of option resources from the server.
      properties:
        options:
          type: array
          items:
            "$ref": "#/components/schemas/schoolsOption"
          description: options contains a list of options.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsListSchoolsResponse:
      type: object
      description: |-
        ListSchoolsResponse contains a list of school resources from the
        server.
      properties:
        schools:
          type: array
          items:
            "$ref": "#/components/schemas/schoolsSchool"
          description: schools contains a list of Schools.
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsOption:
      type: object
      description: Option provides the model for school options.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the unique identifier linked to an option.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        key:
          type: string
          description: |-
            key is the unique field key we use to map against to easily find the
            field when applied to a school
        label:
          type: string
          description: |-
            Option Content
            label is the name the school sees within the UI.
        description:
          type: string
          description: description provides further information about the field.
        headingId:
          type: string
          format: uuid
          description: |-
            headingId is the sub group the field is linked to in order to
            dynamically generate UI.
        inputType:
          "$ref": "#/components/schemas/InputType"
        dataType:
          "$ref": "#/components/schemas/DataType"
        options:
          type: array
          items:
            "$ref": "#/components/schemas/FieldOption"
          description: |-
            options contains the list of options for items such as checkboxes,
            select fields e.t.c.
        htmlAttributes:
          type: object
          additionalProperties:
            type: string
          description: |-
            htmlAttributes for input tags.
            For example `<input type="number" min="5" max="10">`
        sequence:
          type: integer
          format: int32
          description: |-
            Sequence is a rough ordering. The lower the number, the closer to the
            top the option will appear in the options menu
        optionSetIds:
          type: array
          items:
            type: string
            format: uuid
          description: |-
            optionSetIds is a list of IDs for Option Sets to which this Option
            belongs
        default:
          "$ref": "#/components/schemas/FieldValue"
        enabled:
          type: boolean
          format: boolean
          description: |-
            Option Visibility
            Enabled specifies whether the feature/option is enabled for schools.
        staticContent:
          type: string
          description: |-
            staticContent enables this option to contain static content, for
            example, a description or title relating to the following fields in a
            list.

    schoolsOptionGroup:
      type: object
      description: |-
        OptionGroup provides the model for option groups, that is a logical
        grouping of school options.
      properties:
        id:
          type: string
          format: uuid
          description: id is the unique identifier linked to an option
        createTime:
          type: integer
          format: int64
          description: createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds from
            the epoch.
        key:
          type: string
          description: |-
            key is the key by which this group is known, used as a prefix for
            options' keys.
        name:
          type: string
          description: name is text that will appear in the accordian for the option group
        description:
          type: string
          description: description provides further information about the option group
        icon:
          type: string
          description: |-
            icon provides the name of the material icon to use to represent the
            option group.
        sequence:
          type: integer
          format: int32
          description: |-
            Sequence is a rough ordering. The lower the number, the closer to the
            top the option will appear in the options menu

    schoolsOptionGroupResponse:
      type: object
      description: |-
        OptionGroupResponse returns a option group resource, or informs the client
        of the error.
      properties:
        optionGroup:
          "$ref": "#/components/schemas/schoolsOptionGroup"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsOptionHeading:
      type: object
      description: |-
        OptionHeading provides the model of a school option heading for dynamically
        generating a hierarchy of options for display purposes.
      properties:
        id:
          type: string
          format: uuid
          description: id is the unique identifier linked to an option heading
        createTime:
          type: integer
          format: int64
          description: createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds from
            the epoch.
        key:
          type: string
          description: |-
            key is the key by which this group is known, used as a prefix for
            options' keys.
        name:
          type: string
          description: name is text that will appear in the option group heading
        groupId:
          type: string
          format: uuid
          description: |-
            groupid is the accordian group the heading is linked to in order to
            dynamically generate UI
        sequence:
          type: integer
          format: int32
          description: |-
            Sequence is a rough ordering. The lower the number, the closer to the
            top the option will appear in the options menu.

    schoolsOptionHeadingResponse:
      type: object
      description: |-
        OptionHeadingResponse returns a option heading resource, or informs the
        client of the error.
      properties:
        optionHeading:
          "$ref": "#/components/schemas/schoolsOptionHeading"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsOptionResponse:
      type: object
      description: |-
        OptionResponse returns a option resource, or informs the client of
        the error.
      properties:
        option:
          "$ref": "#/components/schemas/schoolsOption"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsSchool:
      type: object
      description: School is model of the resource that is persisted to a database
      properties:
        id:
          type: string
          format: uuid
          description: id is the School's unique identifier.
        createTime:
          type: integer
          format: int64
          description: createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds from
            the epoch.
        countryCode:
          "$ref": "#/components/schemas/schoolsISO2CountryCode"
        name:
          type: string
          description: name is the Name of the School
        domain:
          type: string
          description: |-
            domain stores the school's official website address for use in
            documents and reports.
        phone:
          type: string
          description: |-
            phone is the School Phone Number on which the public can reach
            the school from.
        fax:
          type: string
          description: |-
            fax is the School Fax Number on which the public can send
            facsimile messages.
        emailAddress:
          type: string
          format: email
          description: |-
            email is the School Email address on which the public can send
            e-mails to. This email address will be used to send replies from
            txt messages and other admin notification emails.
        physicalAddress:
          "$ref": "#/components/schemas/schoolsAddress"
        postalAddress:
          "$ref": "#/components/schemas/schoolsAddress"
        jurisdiction:
          "$ref": "#/components/schemas/Jurisdiction"
        allowedJurisdictions:
          type: array
          items:
            "$ref": "#/components/schemas/Jurisdiction"
        jurisdictionalId:
          type: string
          description: |-
            jurisdictionalId is the school's unique identifier assigned by the
            jurisdictional authority (i.e. NZ MOE)
        logoMediaId:
          type: string
          format: uuid
          description: |-
            logoMediaId is the ID of a Media record which contains the school's
            logo as a web-viewable image
        options:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/FieldValue"
        optionSetIds:
          type: array
          description: |-
            optionSetIds contain a list of option set unique identifiers that
            allow building the School's Option Schema.
          items:
            type: string
            format: uuid
        featuresAvailable:
          type: array
          description: |-
            featuresAvailable determines which Features are potentially
            available to this School.
          items:
            "$ref": "#/components/schemas/schoolsFeature"
        featuresEnabled:
          type: array
          description: |-
            featuresEnabled determines which Features are enabled for this
            School.
          items:
            "$ref": "#/components/schemas/schoolsFeature"
        supportPersonIds:
          type: array
          description: |-
            supportPersonIds is a list of Person IDs for staff members who have
            permission to create support tickets.
          items:
            type: string
            format: uuid

    schoolsSchoolOptionsResponse:
      type: object
      description: SchoolOptionsResponse returns the school's options.
      properties:
        options:
          type: array
          description: |-
            options contains an array of options specific to a school's options.
          items:
            "$ref": "#/components/schemas/schoolsOption"
        optionHeadings:
          type: array
          description: |-
            optionHeadings contains an array of option headings specific to a
            school's options.
          items:
            "$ref": "#/components/schemas/schoolsOptionHeading"
        optionGroups:
          type: array
          description: |-
            optionGroups contains an array of option groups specific to a
            school's options.
          items:
            "$ref": "#/components/schemas/schoolsOptionGroup"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsSchoolResponse:
      type: object
      description: |-
        SchoolResponse returns a school resource, or informs the client of
        the error.
      properties:
        school:
          "$ref": "#/components/schemas/schoolsSchool"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    schoolsUpdateSchoolRequest:
      type: object
      description: UpdateSchoolRequest Updates a school resource on the server.
      properties:
        schoolId:
          type: string
          format: uuid
          description: The specific School to Update.
        school:
          "$ref": "#/components/schemas/schoolsSchool"

    timetableCreatePeriodRequest:
      type: object
      description: |-
        CreatePeriodRequest contains the request required to create a period
        resource on the server.
      properties:
        period:
          "$ref": "#/components/schemas/timetablePeriod"

    timetableCreateStructureRequest:
      type: object
      description: |-
        CreateStructureRequest contains the request required to create a
        timetable structure resource on the server.
      properties:
        structure:
          "$ref": "#/components/schemas/timetableStructure"

    timetableDay:
      type: object
      description: |-
        Day provides structured information about a timetabled day, which
        contains the timetabled periods for the given day.
      properties:
        name:
          type: string
          description: name contains a label for the day. For example 'Monday'.
        isoDayNumber:
          type: integer
          format: int32
          description: isoDayNumber is the ISO Day of Week (1-7 = Mon-Sun)
        periodIds:
          type: array
          description: |-
            periodIds contains links to the timetable periods that occur on
            this day.
          items:
            type: string
            format: uuid

    timetableListPeriodsResponse:
      type: object
      description: |-
        ListPeriodsResponse contains the response returned from the server
        encapsulating a list of period resources.
      properties:
        periods:
          type: array
          description: |-
            periods contains a list of period resources from the server.
          items:
            "$ref": "#/components/schemas/timetablePeriod"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"


    timetableListStructuresResponse:
      type: object
      description: |-
        ListStructuresResponse contains the response returned from the server
        encapsulating a list of timetable structure resources.
      properties:
        structures:
          type: array
          description: |-
            structures contains a list of timetable structure resources from
            the server.
          items:
            "$ref": "#/components/schemas/timetableStructure"
        periods:
          type: array
          description: |-
            periods contains the included resources if requested via the include
            query param.
          items:
            "$ref": "#/components/schemas/timetablePeriod"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    timetablePeriod:
      type: object
      description: |-
        Period provides structured information about a timetabled period.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the unique identifier of the school's timetabled period.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId specifies the unique identifier of the school who created
            the period.
        campusId:
          type: string
          format: uuid
          description: |-
            campusId specifies the unique identifier of the school campus who
            created the period.
        authorId:
          type: string
          format: uuid
          description: |-
            authorId is the unique identifier of the person who created the
            period.
        shortName:
          type: string
          description: |-
            shortName provides a label, or display name of the period.
            For example, 'P1'.
        longName:
          type: string
          description: |-
            longName provides a full description of the period.
            For example, 'Period 1'.
        duration:
          type: integer
          format: int32
          description: duration is the length of this period in minutes.
        startTime:
          type: string
          description: |-
            startTime is the time at which this period starts (HH:MM).
        structureId:
          type: string
          format: uuid
          description: |-
            structureId is the unique identifier of the timetable structure
            this period is linked to.

    timetablePeriodResponse:
      type: object
      description: |-
        PeriodResponse contains the period resource stored on the server.
      properties:
        period:
          "$ref": "#/components/schemas/timetablePeriod"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"

    timetableStructure:
      type: object
      description: |-
        Structure provides information about a school's timetable structure.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            id is the unique identifier of the school's timetable structure
            record.
        createTime:
          type: integer
          format: int64
          description: |-
            createTime is when the resource was created in seconds from the
            epoch.
        updateTime:
          type: integer
          format: int64
          description: |-
            updateTime is the last time the resource was modified in seconds
            from the epoch.
        schoolId:
          type: string
          format: uuid
          description: |-
            schoolId is the unique identifier of the school who created the
            timetable structure.
        campusId:
          type: string
          format: uuid
          description: |-
            campusId is the unique identifier of the school's campus who created
            the timetable structure.
        authorId:
          type: string
          format: uuid
          description: |-
            authorId is the unique identifier of the person who created the
            timetable structure.
        name:
          type: string
          description: |-
            name is the name of the structure.
            For example, 'Term 3'.
        effectiveFrom:
          type: string
          format: date
          description: |-
            effectiveFrom is the date from which this timetable structure will
            be in effect in ISO 8601 format (YYYY-MM-DD).
        days:
          type: array
          description: |-
            days contains a list of weekdays days, containing the timetabled
            periods for each given day.
          items:
            "$ref": "#/components/schemas/timetableDay"
        archived:
          type: boolean
          format: boolean
          description: |-
            archived specifies whether the timetable structure has been
            archived.

    timetableStructureResponse:
      type: object
      description: |-
        StructureResponse contains the timetable structure resource stored on
        the server.
      properties:
        structure:
          "$ref": "#/components/schemas/timetableStructure"
        statusCode:
          "$ref": "#/components/schemas/StatusCode"
